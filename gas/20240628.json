{
    "nethermind": [
        {
            "title": "GasLimit",
            "max": "343.52",
            "p50": "301.22",
            "p95": "157.91",
            "p99": "144.16",
            "min": "142.11",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "933.22",
            "p50": "747.75",
            "p95": "575.84",
            "p99": "504.74",
            "min": "496.53",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "450.57",
            "p50": "393.55",
            "p95": "290.85",
            "p99": "275.56",
            "min": "273.53",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "260.36",
            "p50": "236.32",
            "p95": "203.17",
            "p99": "191.63",
            "min": "191.54",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "10952.25",
            "p50": "4266.36",
            "p95": "1187.48",
            "p99": "748.03",
            "min": "368.06",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "995.75",
            "p50": "752.00",
            "p95": "473.84",
            "p99": "437.77",
            "min": "415.96",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "14286.15",
            "p50": "4434.61",
            "p95": "1156.70",
            "p99": "737.92",
            "min": "343.27",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "25351.93",
            "p50": "4370.93",
            "p95": "1118.44",
            "p99": "910.66",
            "min": "845.92",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "1080.64",
            "p50": "820.46",
            "p95": "542.75",
            "p99": "510.63",
            "min": "510.30",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "428.70",
            "p50": "362.72",
            "p95": "270.28",
            "p99": "193.73",
            "min": "153.16",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "237.46",
            "p50": "224.46",
            "p95": "191.24",
            "p99": "174.34",
            "min": "173.21",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "70.99",
            "p50": "69.49",
            "p95": "65.74",
            "p99": "63.80",
            "min": "63.73",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "80.65",
            "p50": "76.56",
            "p95": "72.82",
            "p99": "68.69",
            "min": "68.48",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "2299.76",
            "p50": "1495.11",
            "p95": "1004.78",
            "p99": "902.68",
            "min": "869.89",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "70.57",
            "p50": "68.47",
            "p95": "64.15",
            "p99": "62.38",
            "min": "62.18",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "70.24",
            "p50": "68.34",
            "p95": "65.19",
            "p99": "62.61",
            "min": "62.52",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "1447.32",
            "p50": "1127.97",
            "p95": "691.77",
            "p99": "634.24",
            "min": "625.41",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "3637.95",
            "p50": "2192.40",
            "p95": "1130.78",
            "p99": "1101.22",
            "min": "1097.21",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "1490.49",
            "p50": "1115.34",
            "p95": "695.84",
            "p99": "604.74",
            "min": "579.42",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "134.25",
            "p50": "125.93",
            "p95": "118.12",
            "p99": "123.12",
            "min": "114.72",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "137.14",
            "p50": "130.42",
            "p95": "119.44",
            "p99": "121.71",
            "min": "113.41",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "199.43",
            "p50": "172.79",
            "p95": "155.53",
            "p99": "155.68",
            "min": "145.42",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "194.79",
            "p50": "149.08",
            "p95": "140.78",
            "p99": "163.07",
            "min": "139.14",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "133.03",
            "p50": "123.41",
            "p95": "113.14",
            "p99": "105.32",
            "min": "104.64",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "153.86",
            "p50": "143.06",
            "p95": "129.33",
            "p99": "122.43",
            "min": "122.42",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "133.39",
            "p50": "123.48",
            "p95": "111.82",
            "p99": "89.01",
            "min": "84.21",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "132.34",
            "p50": "123.21",
            "p95": "112.28",
            "p99": "105.95",
            "min": "105.37",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "823.40",
            "p50": "667.45",
            "p95": "426.87",
            "p99": "333.74",
            "min": "285.46",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "783.41",
            "p50": "709.06",
            "p95": "454.19",
            "p99": "245.42",
            "min": "96.25",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "837.55",
            "p50": "743.90",
            "p95": "460.33",
            "p99": "399.59",
            "min": "392.24",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "776.32",
            "p50": "685.09",
            "p95": "445.63",
            "p99": "268.38",
            "min": "173.54",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "743.86",
            "p50": "625.00",
            "p95": "404.23",
            "p99": "356.84",
            "min": "355.00",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "862.63",
            "p50": "711.27",
            "p95": "500.45",
            "p99": "392.61",
            "min": "389.42",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "240.75",
            "p50": "214.08",
            "p95": "170.10",
            "p99": "162.75",
            "min": "161.70",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "238.25",
            "p50": "212.96",
            "p95": "189.21",
            "p99": "161.94",
            "min": "160.47",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "248.12",
            "p50": "217.25",
            "p95": "193.53",
            "p99": "170.73",
            "min": "168.12",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "237.59",
            "p50": "212.51",
            "p95": "174.19",
            "p99": "90.27",
            "min": "70.97",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "237.77",
            "p50": "223.09",
            "p95": "189.65",
            "p99": "177.54",
            "min": "177.35",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "295.26",
            "p50": "270.42",
            "p95": "223.77",
            "p99": "127.01",
            "min": "109.37",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "319.02",
            "p50": "297.68",
            "p95": "236.06",
            "p99": "117.99",
            "min": "75.76",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "411.73",
            "p50": "391.43",
            "p95": "313.34",
            "p99": "285.26",
            "min": "279.65",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "631.43",
            "p50": "568.65",
            "p95": "382.08",
            "p99": "335.35",
            "min": "334.70",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "280.03",
            "p50": "254.92",
            "p95": "214.00",
            "p99": "206.29",
            "min": "206.01",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "252.88",
            "p50": "232.27",
            "p95": "193.25",
            "p99": "126.28",
            "min": "104.34",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "270.63",
            "p50": "243.24",
            "p95": "207.22",
            "p99": "191.30",
            "min": "190.85",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "386.60",
            "p50": "346.82",
            "p95": "234.54",
            "p99": "184.61",
            "min": "178.60",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "235.94",
            "p50": "222.28",
            "p95": "188.41",
            "p99": "172.06",
            "min": "170.90",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "280.87",
            "p50": "264.85",
            "p95": "221.37",
            "p99": "203.01",
            "min": "201.59",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "277.38",
            "p50": "258.33",
            "p95": "224.63",
            "p99": "204.09",
            "min": "200.18",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "227.15",
            "p50": "210.91",
            "p95": "189.34",
            "p99": "168.39",
            "min": "168.26",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "282.81",
            "p50": "261.36",
            "p95": "213.96",
            "p99": "201.86",
            "min": "201.40",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "125.93",
            "p50": "119.79",
            "p95": "110.53",
            "p99": "107.67",
            "min": "107.57",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "126.21",
            "p50": "119.91",
            "p95": "109.50",
            "p99": "103.39",
            "min": "102.80",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "127.14",
            "p50": "120.27",
            "p95": "110.11",
            "p99": "102.39",
            "min": "102.20",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "385.64",
            "p50": "348.04",
            "p95": "269.26",
            "p99": "241.36",
            "min": "237.35",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "260.49",
            "p50": "246.44",
            "p95": "208.17",
            "p99": "192.86",
            "min": "190.47",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "425.23",
            "p50": "402.05",
            "p95": "299.91",
            "p99": "261.50",
            "min": "256.65",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "geth": [
        {
            "title": "GasLimit",
            "max": "185.20",
            "p50": "170.44",
            "p95": "146.11",
            "p99": "122.31",
            "min": "119.20",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "823.96",
            "p50": "596.62",
            "p95": "437.64",
            "p99": "369.25",
            "min": "352.38",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "249.87",
            "p50": "218.91",
            "p95": "176.98",
            "p99": "170.99",
            "min": "170.76",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "158.25",
            "p50": "147.09",
            "p95": "126.83",
            "p99": "110.19",
            "min": "107.87",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "2845.31",
            "p50": "1475.67",
            "p95": "1117.79",
            "p99": "899.39",
            "min": "883.35",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "332.88",
            "p50": "290.31",
            "p95": "211.73",
            "p99": "167.31",
            "min": "165.74",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "4052.34",
            "p50": "2448.52",
            "p95": "1264.03",
            "p99": "1105.36",
            "min": "1103.16",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "9779.30",
            "p50": "4520.55",
            "p95": "1143.62",
            "p99": "1101.08",
            "min": "1099.25",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "363.67",
            "p50": "313.96",
            "p95": "224.47",
            "p99": "206.87",
            "min": "206.03",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "165.92",
            "p50": "148.80",
            "p95": "122.87",
            "p99": "113.87",
            "min": "113.69",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "146.05",
            "p50": "135.99",
            "p95": "117.33",
            "p99": "100.34",
            "min": "99.53",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "238.01",
            "p50": "215.74",
            "p95": "170.68",
            "p99": "154.49",
            "min": "150.81",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "51.22",
            "p50": "48.51",
            "p95": "45.93",
            "p99": "43.55",
            "min": "43.14",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "211.17",
            "p50": "192.49",
            "p95": "152.62",
            "p99": "128.29",
            "min": "120.78",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "86.83",
            "p50": "82.64",
            "p95": "75.16",
            "p99": "69.58",
            "min": "67.22",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "86.55",
            "p50": "82.39",
            "p95": "74.96",
            "p99": "71.98",
            "min": "71.89",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "93.01",
            "p50": "89.26",
            "p95": "81.10",
            "p99": "79.17",
            "min": "78.61",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "214.51",
            "p50": "194.00",
            "p95": "158.53",
            "p99": "145.33",
            "min": "143.59",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "93.52",
            "p50": "89.39",
            "p95": "80.63",
            "p99": "77.82",
            "min": "77.11",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "105.93",
            "p50": "102.08",
            "p95": "92.29",
            "p99": "93.90",
            "min": "84.82",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "116.62",
            "p50": "107.10",
            "p95": "96.49",
            "p99": "102.47",
            "min": "94.86",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "258.20",
            "p50": "230.75",
            "p95": "178.41",
            "p99": "176.37",
            "min": "157.18",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "135.20",
            "p50": "118.73",
            "p95": "113.69",
            "p99": "116.77",
            "min": "102.86",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "478.72",
            "p50": "372.81",
            "p95": "275.02",
            "p99": "230.84",
            "min": "226.45",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "497.48",
            "p50": "393.95",
            "p95": "264.81",
            "p99": "229.04",
            "min": "225.97",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "455.52",
            "p50": "379.15",
            "p95": "250.46",
            "p99": "228.53",
            "min": "227.86",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "486.60",
            "p50": "370.24",
            "p95": "265.33",
            "p99": "218.93",
            "min": "216.43",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "1028.15",
            "p50": "731.06",
            "p95": "511.70",
            "p99": "468.09",
            "min": "466.82",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "803.97",
            "p50": "604.63",
            "p95": "401.37",
            "p99": "376.68",
            "min": "355.69",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "945.52",
            "p50": "715.03",
            "p95": "490.94",
            "p99": "461.08",
            "min": "455.34",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "820.58",
            "p50": "611.67",
            "p95": "409.87",
            "p99": "372.43",
            "min": "360.74",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "865.87",
            "p50": "639.01",
            "p95": "433.82",
            "p99": "387.72",
            "min": "381.23",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "960.52",
            "p50": "686.69",
            "p95": "483.76",
            "p99": "430.79",
            "min": "423.65",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "425.20",
            "p50": "339.66",
            "p95": "242.62",
            "p99": "210.54",
            "min": "205.68",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "396.06",
            "p50": "332.38",
            "p95": "249.74",
            "p99": "202.87",
            "min": "199.23",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "394.16",
            "p50": "329.14",
            "p95": "239.67",
            "p99": "209.71",
            "min": "209.12",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "436.91",
            "p50": "343.77",
            "p95": "262.19",
            "p99": "254.02",
            "min": "253.83",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "68.42",
            "p50": "65.69",
            "p95": "61.18",
            "p99": "59.91",
            "min": "59.90",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "157.37",
            "p50": "145.99",
            "p95": "124.18",
            "p99": "114.21",
            "min": "112.42",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "151.35",
            "p50": "140.06",
            "p95": "121.46",
            "p99": "109.45",
            "min": "105.98",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "164.59",
            "p50": "151.76",
            "p95": "129.57",
            "p99": "114.63",
            "min": "106.13",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "228.19",
            "p50": "206.65",
            "p95": "165.73",
            "p99": "137.84",
            "min": "137.29",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "142.03",
            "p50": "134.03",
            "p95": "113.30",
            "p99": "101.92",
            "min": "100.79",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "197.94",
            "p50": "181.08",
            "p95": "150.04",
            "p99": "141.92",
            "min": "139.64",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "158.58",
            "p50": "146.60",
            "p95": "127.23",
            "p99": "111.20",
            "min": "109.56",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "222.91",
            "p50": "201.83",
            "p95": "162.24",
            "p99": "137.89",
            "min": "131.11",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "108.53",
            "p50": "102.20",
            "p95": "91.63",
            "p99": "82.66",
            "min": "81.78",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "187.60",
            "p50": "174.66",
            "p95": "144.18",
            "p99": "130.40",
            "min": "130.00",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "161.81",
            "p50": "148.03",
            "p95": "125.34",
            "p99": "112.89",
            "min": "111.76",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "144.81",
            "p50": "137.28",
            "p95": "117.55",
            "p99": "110.45",
            "min": "110.06",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "190.54",
            "p50": "174.09",
            "p95": "147.22",
            "p99": "135.89",
            "min": "134.99",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "69.96",
            "p50": "67.68",
            "p95": "62.92",
            "p99": "61.54",
            "min": "61.34",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "71.26",
            "p50": "68.84",
            "p95": "63.73",
            "p99": "61.86",
            "min": "61.82",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "75.33",
            "p50": "72.58",
            "p95": "67.13",
            "p99": "64.13",
            "min": "63.65",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "167.92",
            "p50": "156.68",
            "p95": "132.25",
            "p99": "120.68",
            "min": "116.18",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "191.68",
            "p50": "177.38",
            "p95": "134.99",
            "p99": "113.14",
            "min": "111.32",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "200.12",
            "p50": "180.52",
            "p95": "152.30",
            "p99": "148.58",
            "min": "148.47",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "reth": [
        {
            "title": "GasLimit",
            "max": "714.05",
            "p50": "582.89",
            "p95": "386.33",
            "p99": "369.65",
            "min": "369.53",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "1557.26",
            "p50": "1015.41",
            "p95": "959.83",
            "p99": "851.01",
            "min": "820.46",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "858.33",
            "p50": "680.74",
            "p95": "450.04",
            "p99": "436.71",
            "min": "436.52",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "719.81",
            "p50": "567.53",
            "p95": "371.38",
            "p99": "366.84",
            "min": "366.79",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "8036.29",
            "p50": "4828.75",
            "p95": "1190.82",
            "p99": "1111.62",
            "min": "1106.72",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "810.70",
            "p50": "646.99",
            "p95": "433.65",
            "p99": "404.62",
            "min": "402.71",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "14319.33",
            "p50": "4877.73",
            "p95": "1317.81",
            "p99": "1196.19",
            "min": "1194.28",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "39804.10",
            "p50": "4873.78",
            "p95": "1248.20",
            "p99": "1214.39",
            "min": "1211.29",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "813.69",
            "p50": "651.45",
            "p95": "456.87",
            "p99": "382.81",
            "min": "381.98",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "438.56",
            "p50": "369.84",
            "p95": "273.82",
            "p99": "264.43",
            "min": "263.24",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "238.98",
            "p50": "219.13",
            "p95": "182.41",
            "p99": "177.70",
            "min": "176.99",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "72.05",
            "p50": "70.02",
            "p95": "65.04",
            "p99": "64.50",
            "min": "64.38",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "80.62",
            "p50": "76.33",
            "p95": "71.61",
            "p99": "70.23",
            "min": "70.05",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "169.12",
            "p50": "159.39",
            "p95": "137.86",
            "p99": "133.52",
            "min": "132.70",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "52.33",
            "p50": "51.12",
            "p95": "49.30",
            "p99": "48.43",
            "min": "48.39",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "52.31",
            "p50": "51.14",
            "p95": "48.84",
            "p99": "48.20",
            "min": "48.14",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "1193.77",
            "p50": "876.35",
            "p95": "581.55",
            "p99": "533.49",
            "min": "512.92",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "5837.71",
            "p50": "2849.94",
            "p95": "1254.48",
            "p99": "1161.00",
            "min": "1117.83",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "1038.98",
            "p50": "793.58",
            "p95": "515.21",
            "p99": "487.68",
            "min": "483.98",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "64.57",
            "p50": "61.82",
            "p95": "60.00",
            "p99": "61.73",
            "min": "59.59",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "69.60",
            "p50": "66.56",
            "p95": "63.12",
            "p99": "65.01",
            "min": "62.54",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "310.97",
            "p50": "271.71",
            "p95": "220.64",
            "p99": "233.55",
            "min": "215.39",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "88.91",
            "p50": "73.58",
            "p95": "69.09",
            "p99": "77.11",
            "min": "68.20",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "464.14",
            "p50": "398.32",
            "p95": "289.69",
            "p99": "282.89",
            "min": "281.62",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "488.40",
            "p50": "406.56",
            "p95": "298.18",
            "p99": "291.67",
            "min": "290.89",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "464.45",
            "p50": "395.02",
            "p95": "289.27",
            "p99": "274.97",
            "min": "273.69",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "460.43",
            "p50": "400.83",
            "p95": "295.35",
            "p99": "284.94",
            "min": "284.61",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "1535.47",
            "p50": "1052.59",
            "p95": "751.53",
            "p99": "721.21",
            "min": "716.53",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "1334.29",
            "p50": "958.06",
            "p95": "658.01",
            "p99": "618.94",
            "min": "616.44",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "1515.77",
            "p50": "1058.63",
            "p95": "742.24",
            "p99": "684.39",
            "min": "673.12",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "1348.97",
            "p50": "945.54",
            "p95": "654.81",
            "p99": "581.07",
            "min": "576.82",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "1320.29",
            "p50": "949.66",
            "p95": "655.50",
            "p99": "618.20",
            "min": "608.83",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "1516.55",
            "p50": "1031.42",
            "p95": "732.39",
            "p99": "648.51",
            "min": "641.67",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "397.61",
            "p50": "347.62",
            "p95": "285.26",
            "p99": "257.67",
            "min": "256.65",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "398.03",
            "p50": "345.86",
            "p95": "263.52",
            "p99": "251.87",
            "min": "249.47",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "423.43",
            "p50": "366.09",
            "p95": "298.46",
            "p99": "270.71",
            "min": "270.26",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "397.66",
            "p50": "351.31",
            "p95": "275.32",
            "p99": "257.27",
            "min": "255.93",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "271.32",
            "p50": "247.01",
            "p95": "199.68",
            "p99": "196.42",
            "min": "196.12",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "756.83",
            "p50": "582.18",
            "p95": "407.85",
            "p99": "321.54",
            "min": "314.71",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "792.11",
            "p50": "627.75",
            "p95": "424.99",
            "p99": "357.94",
            "min": "342.98",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "527.48",
            "p50": "453.42",
            "p95": "326.78",
            "p99": "298.39",
            "min": "291.69",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "912.95",
            "p50": "712.23",
            "p95": "468.82",
            "p99": "433.73",
            "min": "432.99",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "506.23",
            "p50": "427.15",
            "p95": "307.30",
            "p99": "296.58",
            "min": "296.10",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "581.28",
            "p50": "484.38",
            "p95": "335.09",
            "p99": "325.49",
            "min": "324.37",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "718.27",
            "p50": "584.67",
            "p95": "377.95",
            "p99": "369.39",
            "min": "369.01",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "923.50",
            "p50": "702.31",
            "p95": "470.28",
            "p99": "406.47",
            "min": "385.62",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "268.43",
            "p50": "243.09",
            "p95": "199.03",
            "p99": "197.35",
            "min": "197.30",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "680.99",
            "p50": "549.35",
            "p95": "366.27",
            "p99": "356.57",
            "min": "356.38",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "716.87",
            "p50": "582.97",
            "p95": "400.95",
            "p99": "365.66",
            "min": "364.96",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "239.80",
            "p50": "220.46",
            "p95": "188.92",
            "p99": "180.99",
            "min": "180.85",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "723.24",
            "p50": "574.19",
            "p95": "377.56",
            "p99": "354.45",
            "min": "349.73",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "147.80",
            "p50": "138.99",
            "p95": "123.01",
            "p99": "119.55",
            "min": "119.43",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "151.33",
            "p50": "143.22",
            "p95": "126.34",
            "p99": "123.56",
            "min": "123.24",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "151.50",
            "p50": "142.17",
            "p95": "128.91",
            "p99": "124.00",
            "min": "123.93",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "454.83",
            "p50": "399.03",
            "p95": "287.64",
            "p99": "278.53",
            "min": "278.49",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "711.24",
            "p50": "565.04",
            "p95": "401.32",
            "p99": "362.78",
            "min": "360.24",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "708.08",
            "p50": "564.85",
            "p95": "396.11",
            "p99": "367.13",
            "min": "366.53",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "besu": [
        {
            "title": "GasLimit",
            "max": "83.84",
            "p50": "79.24",
            "p95": "61.06",
            "p99": "58.91",
            "min": "58.87",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "651.71",
            "p50": "411.15",
            "p95": "201.38",
            "p99": "182.97",
            "min": "180.02",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "138.77",
            "p50": "132.32",
            "p95": "119.31",
            "p99": "116.63",
            "min": "116.52",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "88.43",
            "p50": "69.25",
            "p95": "65.74",
            "p99": "64.05",
            "min": "63.88",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "3141.49",
            "p50": "2012.77",
            "p95": "1085.01",
            "p99": "648.28",
            "min": "646.50",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "292.52",
            "p50": "245.75",
            "p95": "196.96",
            "p99": "179.87",
            "min": "176.19",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "4299.74",
            "p50": "1405.74",
            "p95": "692.84",
            "p99": "543.96",
            "min": "435.13",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "13847.72",
            "p50": "4539.12",
            "p95": "1156.92",
            "p99": "909.20",
            "min": "859.76",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "287.94",
            "p50": "236.55",
            "p95": "198.12",
            "p99": "178.95",
            "min": "167.81",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "230.56",
            "p50": "196.24",
            "p95": "157.13",
            "p99": "136.03",
            "min": "128.06",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "97.86",
            "p50": "91.22",
            "p95": "70.11",
            "p99": "62.24",
            "min": "61.11",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "71.53",
            "p50": "68.72",
            "p95": "65.30",
            "p99": "62.89",
            "min": "62.29",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "54.65",
            "p50": "52.36",
            "p95": "49.69",
            "p99": "48.37",
            "min": "48.32",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "1162.89",
            "p50": "798.35",
            "p95": "537.97",
            "p99": "428.83",
            "min": "411.68",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "66.86",
            "p50": "64.79",
            "p95": "60.34",
            "p99": "58.62",
            "min": "58.59",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "66.62",
            "p50": "64.64",
            "p95": "60.87",
            "p99": "58.63",
            "min": "58.22",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "871.55",
            "p50": "654.91",
            "p95": "406.72",
            "p99": "339.64",
            "min": "333.79",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "1412.23",
            "p50": "931.44",
            "p95": "518.88",
            "p99": "333.17",
            "min": "322.57",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "883.50",
            "p50": "641.65",
            "p95": "439.52",
            "p99": "378.92",
            "min": "342.74",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "77.80",
            "p50": "73.74",
            "p95": "71.06",
            "p99": "73.32",
            "min": "69.94",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "69.13",
            "p50": "66.41",
            "p95": "63.43",
            "p99": "63.90",
            "min": "61.09",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "41.95",
            "p50": "38.33",
            "p95": "35.30",
            "p99": "36.18",
            "min": "34.83",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "113.35",
            "p50": "86.92",
            "p95": "82.12",
            "p99": "94.79",
            "min": "80.79",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "68.02",
            "p50": "63.71",
            "p95": "58.44",
            "p99": "56.81",
            "min": "56.69",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "64.35",
            "p50": "61.09",
            "p95": "56.45",
            "p99": "55.07",
            "min": "55.01",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "67.58",
            "p50": "63.26",
            "p95": "57.75",
            "p99": "56.17",
            "min": "56.17",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "68.08",
            "p50": "63.59",
            "p95": "58.44",
            "p99": "56.92",
            "min": "56.80",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "249.21",
            "p50": "221.86",
            "p95": "186.59",
            "p99": "170.97",
            "min": "166.69",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "304.92",
            "p50": "266.99",
            "p95": "216.25",
            "p99": "188.44",
            "min": "176.84",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "250.72",
            "p50": "226.01",
            "p95": "187.05",
            "p99": "177.08",
            "min": "175.03",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "281.67",
            "p50": "253.30",
            "p95": "204.41",
            "p99": "187.31",
            "min": "182.40",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "242.09",
            "p50": "217.72",
            "p95": "185.15",
            "p99": "166.73",
            "min": "165.22",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "250.63",
            "p50": "225.04",
            "p95": "188.63",
            "p99": "178.63",
            "min": "176.97",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "57.73",
            "p50": "54.77",
            "p95": "49.64",
            "p99": "48.24",
            "min": "48.19",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "57.83",
            "p50": "54.83",
            "p95": "49.86",
            "p99": "48.72",
            "min": "48.70",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "60.68",
            "p50": "57.16",
            "p95": "52.21",
            "p99": "50.65",
            "min": "50.45",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "57.82",
            "p50": "55.01",
            "p95": "49.70",
            "p99": "48.71",
            "min": "48.71",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "99.43",
            "p50": "95.26",
            "p95": "88.63",
            "p99": "86.69",
            "min": "86.56",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "72.26",
            "p50": "67.99",
            "p95": "63.59",
            "p99": "61.13",
            "min": "60.95",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "84.96",
            "p50": "79.45",
            "p95": "73.85",
            "p99": "70.92",
            "min": "70.33",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "172.47",
            "p50": "163.35",
            "p95": "148.10",
            "p99": "131.93",
            "min": "125.13",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "166.20",
            "p50": "156.58",
            "p95": "137.46",
            "p99": "135.39",
            "min": "135.33",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "97.73",
            "p50": "93.39",
            "p95": "87.38",
            "p99": "85.93",
            "min": "85.87",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "91.21",
            "p50": "81.72",
            "p95": "73.93",
            "p99": "71.05",
            "min": "70.87",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "89.02",
            "p50": "85.37",
            "p95": "79.41",
            "p99": "77.61",
            "min": "77.60",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "127.08",
            "p50": "120.85",
            "p95": "109.55",
            "p99": "106.29",
            "min": "105.93",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "100.08",
            "p50": "94.54",
            "p95": "87.60",
            "p99": "85.84",
            "min": "85.78",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "75.52",
            "p50": "72.41",
            "p95": "67.96",
            "p99": "65.77",
            "min": "65.61",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "97.61",
            "p50": "93.69",
            "p95": "87.61",
            "p99": "85.30",
            "min": "85.23",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "100.05",
            "p50": "94.74",
            "p95": "88.17",
            "p99": "86.06",
            "min": "85.84",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "81.33",
            "p50": "78.08",
            "p95": "73.15",
            "p99": "71.74",
            "min": "71.59",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "65.17",
            "p50": "60.03",
            "p95": "56.84",
            "p99": "54.12",
            "min": "53.77",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "65.06",
            "p50": "59.74",
            "p95": "56.59",
            "p99": "54.29",
            "min": "54.07",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "64.21",
            "p50": "59.23",
            "p95": "55.62",
            "p99": "54.43",
            "min": "54.37",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "169.55",
            "p50": "159.54",
            "p95": "144.43",
            "p99": "135.96",
            "min": "135.45",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "75.03",
            "p50": "72.40",
            "p95": "68.32",
            "p99": "67.59",
            "min": "67.54",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "103.70",
            "p50": "98.66",
            "p95": "92.07",
            "p99": "88.49",
            "min": "87.99",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "erigon": [
        {
            "title": "GasLimit",
            "max": "157.85",
            "p50": "152.11",
            "p95": "139.14",
            "p99": "128.46",
            "min": "127.81",
            "n": "112",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "208.21",
            "p50": "178.27",
            "p95": "144.38",
            "p99": "159.69",
            "min": "139.88",
            "n": "70",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "201.84",
            "p50": "193.72",
            "p95": "172.71",
            "p99": "145.37",
            "min": "144.79",
            "n": "102",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "157.38",
            "p50": "152.68",
            "p95": "140.66",
            "p99": "132.12",
            "min": "131.84",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "2315.36",
            "p50": "1456.92",
            "p95": "751.32",
            "p99": "652.27",
            "min": "622.64",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "340.77",
            "p50": "317.47",
            "p95": "262.26",
            "p99": "232.06",
            "min": "225.39",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "3901.51",
            "p50": "2131.81",
            "p95": "755.95",
            "p99": "580.27",
            "min": "493.33",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "11433.25",
            "p50": "3855.39",
            "p95": "1135.49",
            "p99": "805.49",
            "min": "650.09",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "336.91",
            "p50": "310.24",
            "p95": "269.52",
            "p99": "237.81",
            "min": "231.60",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "164.06",
            "p50": "155.36",
            "p95": "142.39",
            "p99": "125.53",
            "min": "121.61",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "118.63",
            "p50": "115.11",
            "p95": "105.16",
            "p99": "96.57",
            "min": "96.28",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "238.91",
            "p50": "225.97",
            "p95": "193.11",
            "p99": "174.05",
            "min": "174.04",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "51.65",
            "p50": "49.62",
            "p95": "48.08",
            "p99": "46.45",
            "min": "46.14",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "205.17",
            "p50": "194.93",
            "p95": "172.82",
            "p99": "165.42",
            "min": "164.17",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "86.64",
            "p50": "84.04",
            "p95": "80.02",
            "p99": "76.46",
            "min": "75.57",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "85.92",
            "p50": "83.87",
            "p95": "80.13",
            "p99": "78.22",
            "min": "77.96",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "92.76",
            "p50": "90.16",
            "p95": "84.98",
            "p99": "82.97",
            "min": "82.03",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "210.26",
            "p50": "200.54",
            "p95": "176.51",
            "p99": "156.30",
            "min": "151.59",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "92.93",
            "p50": "90.15",
            "p95": "85.98",
            "p99": "83.67",
            "min": "83.27",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "108.38",
            "p50": "105.96",
            "p95": "100.76",
            "p99": "102.74",
            "min": "98.49",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "111.54",
            "p50": "107.97",
            "p95": "102.22",
            "p99": "104.97",
            "min": "101.42",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "160.41",
            "p50": "150.83",
            "p95": "136.61",
            "p99": "138.93",
            "min": "133.90",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "148.95",
            "p50": "123.37",
            "p95": "117.12",
            "p99": "128.95",
            "min": "113.87",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "245.00",
            "p50": "222.23",
            "p95": "187.07",
            "p99": "171.94",
            "min": "171.26",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "271.01",
            "p50": "246.51",
            "p95": "200.73",
            "p99": "166.52",
            "min": "162.85",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "245.75",
            "p50": "223.98",
            "p95": "180.80",
            "p99": "168.41",
            "min": "168.36",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "243.35",
            "p50": "223.60",
            "p95": "180.23",
            "p99": "160.37",
            "min": "159.64",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "845.45",
            "p50": "705.85",
            "p95": "535.79",
            "p99": "413.90",
            "min": "342.39",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "814.93",
            "p50": "675.83",
            "p95": "528.32",
            "p99": "462.95",
            "min": "442.38",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "814.34",
            "p50": "698.16",
            "p95": "507.35",
            "p99": "402.56",
            "min": "398.13",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "804.71",
            "p50": "687.27",
            "p95": "537.20",
            "p99": "402.51",
            "min": "312.16",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "777.39",
            "p50": "658.70",
            "p95": "483.91",
            "p99": "423.77",
            "min": "393.37",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "797.41",
            "p50": "673.58",
            "p95": "503.85",
            "p99": "436.87",
            "min": "432.52",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "218.59",
            "p50": "201.42",
            "p95": "177.49",
            "p99": "160.95",
            "min": "159.67",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "211.24",
            "p50": "200.34",
            "p95": "180.92",
            "p99": "164.94",
            "min": "164.15",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "220.35",
            "p50": "204.01",
            "p95": "166.29",
            "p99": "157.65",
            "min": "157.53",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "217.09",
            "p50": "204.13",
            "p95": "181.31",
            "p99": "156.03",
            "min": "153.39",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "90.11",
            "p50": "86.62",
            "p95": "82.38",
            "p99": "78.96",
            "min": "78.47",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "82.95",
            "p50": "80.41",
            "p95": "76.45",
            "p99": "70.56",
            "min": "69.70",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "76.71",
            "p50": "74.85",
            "p95": "70.05",
            "p99": "66.15",
            "min": "65.03",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "119.82",
            "p50": "115.73",
            "p95": "106.47",
            "p99": "85.52",
            "min": "76.96",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "178.10",
            "p50": "170.13",
            "p95": "155.19",
            "p99": "140.91",
            "min": "136.03",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "121.17",
            "p50": "117.33",
            "p95": "107.81",
            "p99": "103.44",
            "min": "103.25",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "178.28",
            "p50": "168.04",
            "p95": "154.37",
            "p99": "142.31",
            "min": "140.53",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "158.87",
            "p50": "153.38",
            "p95": "138.00",
            "p99": "122.80",
            "min": "122.71",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "176.43",
            "p50": "169.13",
            "p95": "148.56",
            "p99": "124.89",
            "min": "120.21",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "89.53",
            "p50": "86.70",
            "p95": "82.48",
            "p99": "80.47",
            "min": "80.41",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "157.00",
            "p50": "152.07",
            "p95": "136.54",
            "p99": "126.39",
            "min": "125.37",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "134.74",
            "p50": "129.49",
            "p95": "114.86",
            "p99": "86.23",
            "min": "77.13",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "118.39",
            "p50": "114.25",
            "p95": "106.40",
            "p99": "96.50",
            "min": "94.13",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "157.32",
            "p50": "151.63",
            "p95": "137.87",
            "p99": "128.11",
            "min": "127.66",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "64.18",
            "p50": "62.78",
            "p95": "59.86",
            "p99": "58.45",
            "min": "58.27",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "65.47",
            "p50": "63.90",
            "p95": "60.47",
            "p99": "59.30",
            "min": "59.15",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "68.87",
            "p50": "67.04",
            "p95": "64.15",
            "p99": "62.09",
            "min": "61.96",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "145.60",
            "p50": "138.77",
            "p95": "123.96",
            "p99": "110.59",
            "min": "110.43",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "158.82",
            "p50": "152.37",
            "p95": "137.69",
            "p99": "121.09",
            "min": "116.09",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "161.61",
            "p50": "154.69",
            "p95": "140.11",
            "p99": "132.42",
            "min": "129.40",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ]
}