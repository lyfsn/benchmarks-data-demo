{
    "clients": {
        "nethermind": {
            "name": "nethermind",
            "results": [
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                }
            ]
        },
        "geth": {
            "name": "geth",
            "results": [
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                }
            ]
        },
        "reth": {
            "name": "reth",
            "results": [
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 179.56291,
                    "min": 179.56291,
                    "p50": 179.56291,
                    "p95": 179.56291,
                    "p99": 179.56291,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 154.20883999999998,
                    "min": 154.20883999999998,
                    "p50": 154.20883999999998,
                    "p95": 154.20883999999998,
                    "p99": 154.20883999999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 241.838494,
                    "min": 241.838494,
                    "p50": 241.838494,
                    "p95": 241.838494,
                    "p99": 241.838494,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 216.907142,
                    "min": 216.907142,
                    "p50": 216.907142,
                    "p95": 216.907142,
                    "p99": 216.907142,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 177.303112,
                    "min": 177.303112,
                    "p50": 177.303112,
                    "p95": 177.303112,
                    "p99": 177.303112,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 202.149219,
                    "min": 202.149219,
                    "p50": 202.149219,
                    "p95": 202.149219,
                    "p99": 202.149219,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 231.646865,
                    "min": 231.646865,
                    "p50": 231.646865,
                    "p95": 231.646865,
                    "p99": 231.646865,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 80.978858,
                    "min": 80.978858,
                    "p50": 80.978858,
                    "p95": 80.978858,
                    "p99": 80.978858,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 94.151905,
                    "min": 94.151905,
                    "p50": 94.151905,
                    "p95": 94.151905,
                    "p99": 94.151905,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 108.222927,
                    "min": 108.222927,
                    "p50": 108.222927,
                    "p95": 108.222927,
                    "p99": 108.222927,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 315.106975,
                    "min": 315.106975,
                    "p50": 315.106975,
                    "p95": 315.106975,
                    "p99": 315.106975,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 121.31121599999999,
                    "min": 121.31121599999999,
                    "p50": 121.31121599999999,
                    "p95": 121.31121599999999,
                    "p99": 121.31121599999999,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 280.94131699999997,
                    "min": 280.94131699999997,
                    "p50": 280.94131699999997,
                    "p95": 280.94131699999997,
                    "p99": 280.94131699999997,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 149.88531899999998,
                    "min": 149.88531899999998,
                    "p50": 149.88531899999998,
                    "p95": 149.88531899999998,
                    "p99": 149.88531899999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 136.004732,
                    "min": 136.004732,
                    "p50": 136.004732,
                    "p95": 136.004732,
                    "p99": 136.004732,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 93.71157699999999,
                    "min": 93.71157699999999,
                    "p50": 93.71157699999999,
                    "p95": 93.71157699999999,
                    "p99": 93.71157699999999,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 150.78042399999998,
                    "min": 150.78042399999998,
                    "p50": 150.78042399999998,
                    "p95": 150.78042399999998,
                    "p99": 150.78042399999998,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 151.640371,
                    "min": 151.640371,
                    "p50": 151.640371,
                    "p95": 151.640371,
                    "p99": 151.640371,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 48.349787,
                    "min": 48.349787,
                    "p50": 48.349787,
                    "p95": 48.349787,
                    "p99": 48.349787,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 99.07723899999999,
                    "min": 99.07723899999999,
                    "p50": 99.07723899999999,
                    "p95": 99.07723899999999,
                    "p99": 99.07723899999999,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 174.706175,
                    "min": 174.706175,
                    "p50": 174.706175,
                    "p95": 174.706175,
                    "p99": 174.706175,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 40.838204999999995,
                    "min": 40.838204999999995,
                    "p50": 40.838204999999995,
                    "p95": 40.838204999999995,
                    "p99": 40.838204999999995,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 59.061172,
                    "min": 59.061172,
                    "p50": 59.061172,
                    "p95": 59.061172,
                    "p99": 59.061172,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 79.64507499999999,
                    "min": 79.64507499999999,
                    "p50": 79.64507499999999,
                    "p95": 79.64507499999999,
                    "p99": 79.64507499999999,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 240.848592,
                    "min": 240.848592,
                    "p50": 240.848592,
                    "p95": 240.848592,
                    "p99": 240.848592,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 275.14455699999996,
                    "min": 275.14455699999996,
                    "p50": 275.14455699999996,
                    "p95": 275.14455699999996,
                    "p99": 275.14455699999996,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 108.37406399999999,
                    "min": 108.37406399999999,
                    "p50": 108.37406399999999,
                    "p95": 108.37406399999999,
                    "p99": 108.37406399999999,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 634.908362,
                    "min": 634.908362,
                    "p50": 634.908362,
                    "p95": 634.908362,
                    "p99": 634.908362,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 31.122072,
                    "min": 31.122072,
                    "p50": 31.122072,
                    "p95": 31.122072,
                    "p99": 31.122072,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 63.352273999999994,
                    "min": 63.352273999999994,
                    "p50": 63.352273999999994,
                    "p95": 63.352273999999994,
                    "p99": 63.352273999999994,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 376.66369,
                    "min": 376.66369,
                    "p50": 376.66369,
                    "p95": 376.66369,
                    "p99": 376.66369,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 126.690438,
                    "min": 126.690438,
                    "p50": 126.690438,
                    "p95": 126.690438,
                    "p99": 126.690438,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 140.95853499999998,
                    "min": 140.95853499999998,
                    "p50": 140.95853499999998,
                    "p95": 140.95853499999998,
                    "p99": 140.95853499999998,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 153.11896,
                    "min": 153.11896,
                    "p50": 153.11896,
                    "p95": 153.11896,
                    "p99": 153.11896,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 95.706352,
                    "min": 95.706352,
                    "p50": 95.706352,
                    "p95": 95.706352,
                    "p99": 95.706352,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 382.131038,
                    "min": 382.131038,
                    "p50": 382.131038,
                    "p95": 382.131038,
                    "p99": 382.131038,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 237.70407999999998,
                    "min": 237.70407999999998,
                    "p50": 237.70407999999998,
                    "p95": 237.70407999999998,
                    "p99": 237.70407999999998,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 187.135063,
                    "min": 187.135063,
                    "p50": 187.135063,
                    "p95": 187.135063,
                    "p99": 187.135063,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 176.574724,
                    "min": 176.574724,
                    "p50": 176.574724,
                    "p95": 176.574724,
                    "p99": 176.574724,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 120.424752,
                    "min": 120.424752,
                    "p50": 120.424752,
                    "p95": 120.424752,
                    "p99": 120.424752,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 229.94703299999998,
                    "min": 229.94703299999998,
                    "p50": 229.94703299999998,
                    "p95": 229.94703299999998,
                    "p99": 229.94703299999998,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 34.800180999999995,
                    "min": 34.800180999999995,
                    "p50": 34.800180999999995,
                    "p95": 34.800180999999995,
                    "p99": 34.800180999999995,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 197.32364199999998,
                    "min": 197.32364199999998,
                    "p50": 197.32364199999998,
                    "p95": 197.32364199999998,
                    "p99": 197.32364199999998,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 123.89793499999999,
                    "min": 123.89793499999999,
                    "p50": 123.89793499999999,
                    "p95": 123.89793499999999,
                    "p99": 123.89793499999999,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 91.642245,
                    "min": 91.642245,
                    "p50": 91.642245,
                    "p95": 91.642245,
                    "p99": 91.642245,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 82.623683,
                    "min": 82.623683,
                    "p50": 82.623683,
                    "p95": 82.623683,
                    "p99": 82.623683,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 163.27499,
                    "min": 163.27499,
                    "p50": 163.27499,
                    "p95": 163.27499,
                    "p99": 163.27499,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 270.35507,
                    "min": 270.35507,
                    "p50": 270.35507,
                    "p95": 270.35507,
                    "p99": 270.35507,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 83.69941299999999,
                    "min": 83.69941299999999,
                    "p50": 83.69941299999999,
                    "p95": 83.69941299999999,
                    "p99": 83.69941299999999,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 192.302191,
                    "min": 192.302191,
                    "p50": 192.302191,
                    "p95": 192.302191,
                    "p99": 192.302191,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 217.90633499999998,
                    "min": 217.90633499999998,
                    "p50": 217.90633499999998,
                    "p95": 217.90633499999998,
                    "p99": 217.90633499999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 95.495728,
                    "min": 95.495728,
                    "p50": 95.495728,
                    "p95": 95.495728,
                    "p99": 95.495728,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 192.806177,
                    "min": 192.806177,
                    "p50": 192.806177,
                    "p95": 192.806177,
                    "p99": 192.806177,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 247.18420899999998,
                    "min": 247.18420899999998,
                    "p50": 247.18420899999998,
                    "p95": 247.18420899999998,
                    "p99": 247.18420899999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 116.23766699999999,
                    "min": 116.23766699999999,
                    "p50": 116.23766699999999,
                    "p95": 116.23766699999999,
                    "p99": 116.23766699999999,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 167.077606,
                    "min": 167.077606,
                    "p50": 167.077606,
                    "p95": 167.077606,
                    "p99": 167.077606,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 148.535497,
                    "min": 148.535497,
                    "p50": 148.535497,
                    "p95": 148.535497,
                    "p99": 148.535497,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 307.331971,
                    "min": 307.331971,
                    "p50": 307.331971,
                    "p95": 307.331971,
                    "p99": 307.331971,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 178.722556,
                    "min": 178.722556,
                    "p50": 178.722556,
                    "p95": 178.722556,
                    "p99": 178.722556,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 136.54334799999998,
                    "min": 136.54334799999998,
                    "p50": 136.54334799999998,
                    "p95": 136.54334799999998,
                    "p99": 136.54334799999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 111.887226,
                    "min": 111.887226,
                    "p50": 111.887226,
                    "p95": 111.887226,
                    "p99": 111.887226,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 232.707808,
                    "min": 232.707808,
                    "p50": 232.707808,
                    "p95": 232.707808,
                    "p99": 232.707808,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 31.890711,
                    "min": 31.890711,
                    "p50": 31.890711,
                    "p95": 31.890711,
                    "p99": 31.890711,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 24.653311,
                    "min": 24.653311,
                    "p50": 24.653311,
                    "p95": 24.653311,
                    "p99": 24.653311,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 73.24009199999999,
                    "min": 73.24009199999999,
                    "p50": 73.24009199999999,
                    "p95": 73.24009199999999,
                    "p99": 73.24009199999999,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 138.761606,
                    "min": 138.761606,
                    "p50": 138.761606,
                    "p95": 138.761606,
                    "p99": 138.761606,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 24.351578,
                    "min": 24.351578,
                    "p50": 24.351578,
                    "p95": 24.351578,
                    "p99": 24.351578,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 24.373148999999998,
                    "min": 24.373148999999998,
                    "p50": 24.373148999999998,
                    "p95": 24.373148999999998,
                    "p99": 24.373148999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 57.019239,
                    "min": 57.019239,
                    "p50": 57.019239,
                    "p95": 57.019239,
                    "p99": 57.019239,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 24.240612,
                    "min": 24.240612,
                    "p50": 24.240612,
                    "p95": 24.240612,
                    "p99": 24.240612,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 51.642817,
                    "min": 51.642817,
                    "p50": 51.642817,
                    "p95": 51.642817,
                    "p99": 51.642817,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 25.940994999999997,
                    "min": 25.940994999999997,
                    "p50": 25.940994999999997,
                    "p95": 25.940994999999997,
                    "p99": 25.940994999999997,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 43.636207999999996,
                    "min": 43.636207999999996,
                    "p50": 43.636207999999996,
                    "p95": 43.636207999999996,
                    "p99": 43.636207999999996,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 24.992191,
                    "min": 24.992191,
                    "p50": 24.992191,
                    "p95": 24.992191,
                    "p99": 24.992191,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 24.653601,
                    "min": 24.653601,
                    "p50": 24.653601,
                    "p95": 24.653601,
                    "p99": 24.653601,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 26.623057,
                    "min": 26.623057,
                    "p50": 26.623057,
                    "p95": 26.623057,
                    "p99": 26.623057,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 22.638536,
                    "min": 22.638536,
                    "p50": 22.638536,
                    "p95": 22.638536,
                    "p99": 22.638536,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 24.075136999999998,
                    "min": 24.075136999999998,
                    "p50": 24.075136999999998,
                    "p95": 24.075136999999998,
                    "p99": 24.075136999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 26.672995999999998,
                    "min": 26.672995999999998,
                    "p50": 26.672995999999998,
                    "p95": 26.672995999999998,
                    "p99": 26.672995999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 24.388787999999998,
                    "min": 24.388787999999998,
                    "p50": 24.388787999999998,
                    "p95": 24.388787999999998,
                    "p99": 24.388787999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 24.715339999999998,
                    "min": 24.715339999999998,
                    "p50": 24.715339999999998,
                    "p95": 24.715339999999998,
                    "p99": 24.715339999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 145.86321999999998,
                    "min": 145.86321999999998,
                    "p50": 145.86321999999998,
                    "p95": 145.86321999999998,
                    "p99": 145.86321999999998,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 61.793098,
                    "min": 61.793098,
                    "p50": 61.793098,
                    "p95": 61.793098,
                    "p99": 61.793098,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 209.16601599999998,
                    "min": 209.16601599999998,
                    "p50": 209.16601599999998,
                    "p95": 209.16601599999998,
                    "p99": 209.16601599999998,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 113.09114299999999,
                    "min": 113.09114299999999,
                    "p50": 113.09114299999999,
                    "p95": 113.09114299999999,
                    "p99": 113.09114299999999,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 173.756182,
                    "min": 173.756182,
                    "p50": 173.756182,
                    "p95": 173.756182,
                    "p99": 173.756182,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 643.84464,
                    "min": 643.84464,
                    "p50": 643.84464,
                    "p95": 643.84464,
                    "p99": 643.84464,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 162.644159,
                    "min": 162.644159,
                    "p50": 162.644159,
                    "p95": 162.644159,
                    "p99": 162.644159,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 200.910766,
                    "min": 200.910766,
                    "p50": 200.910766,
                    "p95": 200.910766,
                    "p99": 200.910766,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 259.799023,
                    "min": 259.799023,
                    "p50": 259.799023,
                    "p95": 259.799023,
                    "p99": 259.799023,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 99.73190199999999,
                    "min": 99.73190199999999,
                    "p50": 99.73190199999999,
                    "p95": 99.73190199999999,
                    "p99": 99.73190199999999,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 533.559762,
                    "min": 533.559762,
                    "p50": 533.559762,
                    "p95": 533.559762,
                    "p99": 533.559762,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 126.899895,
                    "min": 126.899895,
                    "p50": 126.899895,
                    "p95": 126.899895,
                    "p99": 126.899895,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 184.928226,
                    "min": 184.928226,
                    "p50": 184.928226,
                    "p95": 184.928226,
                    "p99": 184.928226,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 412.602145,
                    "min": 412.602145,
                    "p50": 412.602145,
                    "p95": 412.602145,
                    "p99": 412.602145,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 90.074049,
                    "min": 90.074049,
                    "p50": 90.074049,
                    "p95": 90.074049,
                    "p99": 90.074049,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 1227.538768,
                    "min": 1227.538768,
                    "p50": 1227.538768,
                    "p95": 1227.538768,
                    "p99": 1227.538768,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 73.68137999999999,
                    "min": 73.68137999999999,
                    "p50": 73.68137999999999,
                    "p95": 73.68137999999999,
                    "p99": 73.68137999999999,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 224.11629599999998,
                    "min": 224.11629599999998,
                    "p50": 224.11629599999998,
                    "p95": 224.11629599999998,
                    "p99": 224.11629599999998,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 288.78736599999996,
                    "min": 288.78736599999996,
                    "p50": 288.78736599999996,
                    "p95": 288.78736599999996,
                    "p99": 288.78736599999996,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 24.037447,
                    "min": 24.037447,
                    "p50": 24.037447,
                    "p95": 24.037447,
                    "p99": 24.037447,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 24.116585999999998,
                    "min": 24.116585999999998,
                    "p50": 24.116585999999998,
                    "p95": 24.116585999999998,
                    "p99": 24.116585999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 24.409527,
                    "min": 24.409527,
                    "p50": 24.409527,
                    "p95": 24.409527,
                    "p99": 24.409527,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 24.159304,
                    "min": 24.159304,
                    "p50": 24.159304,
                    "p95": 24.159304,
                    "p99": 24.159304,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 23.890752,
                    "min": 23.890752,
                    "p50": 23.890752,
                    "p95": 23.890752,
                    "p99": 23.890752,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 26.673726,
                    "min": 26.673726,
                    "p50": 26.673726,
                    "p95": 26.673726,
                    "p99": 26.673726,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 24.436837,
                    "min": 24.436837,
                    "p50": 24.436837,
                    "p95": 24.436837,
                    "p99": 24.436837,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 24.539863999999998,
                    "min": 24.539863999999998,
                    "p50": 24.539863999999998,
                    "p95": 24.539863999999998,
                    "p99": 24.539863999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 40.482895,
                    "min": 40.482895,
                    "p50": 40.482895,
                    "p95": 40.482895,
                    "p99": 40.482895,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 26.570338,
                    "min": 26.570338,
                    "p50": 26.570338,
                    "p95": 26.570338,
                    "p99": 26.570338,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 24.049998,
                    "min": 24.049998,
                    "p50": 24.049998,
                    "p95": 24.049998,
                    "p99": 24.049998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 21.443139,
                    "min": 21.443139,
                    "p50": 21.443139,
                    "p95": 21.443139,
                    "p99": 21.443139,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 24.579963,
                    "min": 24.579963,
                    "p50": 24.579963,
                    "p95": 24.579963,
                    "p99": 24.579963,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 26.653395999999997,
                    "min": 26.653395999999997,
                    "p50": 26.653395999999997,
                    "p95": 26.653395999999997,
                    "p99": 26.653395999999997,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 84.707037,
                    "min": 84.707037,
                    "p50": 84.707037,
                    "p95": 84.707037,
                    "p99": 84.707037,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 25.089807999999998,
                    "min": 25.089807999999998,
                    "p50": 25.089807999999998,
                    "p95": 25.089807999999998,
                    "p99": 25.089807999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 33.490598,
                    "min": 33.490598,
                    "p50": 33.490598,
                    "p95": 33.490598,
                    "p99": 33.490598,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 18.566208,
                    "min": 18.566208,
                    "p50": 18.566208,
                    "p95": 18.566208,
                    "p99": 18.566208,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 24.510714999999998,
                    "min": 24.510714999999998,
                    "p50": 24.510714999999998,
                    "p95": 24.510714999999998,
                    "p99": 24.510714999999998,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 24.513793999999997,
                    "min": 24.513793999999997,
                    "p50": 24.513793999999997,
                    "p95": 24.513793999999997,
                    "p99": 24.513793999999997,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 24.515974,
                    "min": 24.515974,
                    "p50": 24.515974,
                    "p95": 24.515974,
                    "p99": 24.515974,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 24.196963,
                    "min": 24.196963,
                    "p50": 24.196963,
                    "p95": 24.196963,
                    "p99": 24.196963,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 23.835034,
                    "min": 23.835034,
                    "p50": 23.835034,
                    "p95": 23.835034,
                    "p99": 23.835034,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 24.369418,
                    "min": 24.369418,
                    "p50": 24.369418,
                    "p95": 24.369418,
                    "p99": 24.369418,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 24.398927999999998,
                    "min": 24.398927999999998,
                    "p50": 24.398927999999998,
                    "p95": 24.398927999999998,
                    "p99": 24.398927999999998,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 23.831923999999997,
                    "min": 23.831923999999997,
                    "p50": 23.831923999999997,
                    "p95": 23.831923999999997,
                    "p99": 23.831923999999997,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 24.787257,
                    "min": 24.787257,
                    "p50": 24.787257,
                    "p95": 24.787257,
                    "p99": 24.787257,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 25.04762,
                    "min": 25.04762,
                    "p50": 25.04762,
                    "p95": 25.04762,
                    "p99": 25.04762,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 23.927941,
                    "min": 23.927941,
                    "p50": 23.927941,
                    "p95": 23.927941,
                    "p99": 23.927941,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 21.851148,
                    "min": 21.851148,
                    "p50": 21.851148,
                    "p95": 21.851148,
                    "p99": 21.851148,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 24.377907999999998,
                    "min": 24.377907999999998,
                    "p50": 24.377907999999998,
                    "p95": 24.377907999999998,
                    "p99": 24.377907999999998,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 24.280081,
                    "min": 24.280081,
                    "p50": 24.280081,
                    "p95": 24.280081,
                    "p99": 24.280081,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 24.108396,
                    "min": 24.108396,
                    "p50": 24.108396,
                    "p95": 24.108396,
                    "p99": 24.108396,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 24.207463,
                    "min": 24.207463,
                    "p50": 24.207463,
                    "p95": 24.207463,
                    "p99": 24.207463,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 44.135444,
                    "min": 44.135444,
                    "p50": 44.135444,
                    "p95": 44.135444,
                    "p99": 44.135444,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 24.378178,
                    "min": 24.378178,
                    "p50": 24.378178,
                    "p95": 24.378178,
                    "p99": 24.378178,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 24.891444,
                    "min": 24.891444,
                    "p50": 24.891444,
                    "p95": 24.891444,
                    "p99": 24.891444,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 24.429997,
                    "min": 24.429997,
                    "p50": 24.429997,
                    "p95": 24.429997,
                    "p99": 24.429997,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 145.80449299999998,
                    "min": 145.80449299999998,
                    "p50": 145.80449299999998,
                    "p95": 145.80449299999998,
                    "p99": 145.80449299999998,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 58.043211,
                    "min": 58.043211,
                    "p50": 58.043211,
                    "p95": 58.043211,
                    "p99": 58.043211,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 1242.7312399999998,
                    "min": 1242.7312399999998,
                    "p50": 1242.7312399999998,
                    "p95": 1242.7312399999998,
                    "p99": 1242.7312399999998,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 284.430823,
                    "min": 284.430823,
                    "p50": 284.430823,
                    "p95": 284.430823,
                    "p99": 284.430823,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 126.68167,
                    "min": 126.68167,
                    "p50": 126.68167,
                    "p95": 126.68167,
                    "p99": 126.68167,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 50.689794,
                    "min": 50.689794,
                    "p50": 50.689794,
                    "p95": 50.689794,
                    "p99": 50.689794,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 111.152768,
                    "min": 111.152768,
                    "p50": 111.152768,
                    "p95": 111.152768,
                    "p99": 111.152768,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 403.14924299999996,
                    "min": 403.14924299999996,
                    "p50": 403.14924299999996,
                    "p95": 403.14924299999996,
                    "p99": 403.14924299999996,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 197.208957,
                    "min": 197.208957,
                    "p50": 197.208957,
                    "p95": 197.208957,
                    "p99": 197.208957,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 173.744404,
                    "min": 173.744404,
                    "p50": 173.744404,
                    "p95": 173.744404,
                    "p99": 173.744404,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 525.679358,
                    "min": 525.679358,
                    "p50": 525.679358,
                    "p95": 525.679358,
                    "p99": 525.679358,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 611.431546,
                    "min": 611.431546,
                    "p50": 611.431546,
                    "p95": 611.431546,
                    "p99": 611.431546,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 210.88650099999998,
                    "min": 210.88650099999998,
                    "p50": 210.88650099999998,
                    "p95": 210.88650099999998,
                    "p99": 210.88650099999998,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 102.059428,
                    "min": 102.059428,
                    "p50": 102.059428,
                    "p95": 102.059428,
                    "p99": 102.059428,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 253.333182,
                    "min": 253.333182,
                    "p50": 253.333182,
                    "p95": 253.333182,
                    "p99": 253.333182,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 149.126052,
                    "min": 149.126052,
                    "p50": 149.126052,
                    "p95": 149.126052,
                    "p99": 149.126052,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 185.52488,
                    "min": 185.52488,
                    "p50": 185.52488,
                    "p95": 185.52488,
                    "p99": 185.52488,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 224.299362,
                    "min": 224.299362,
                    "p50": 224.299362,
                    "p95": 224.299362,
                    "p99": 224.299362,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 140.749234,
                    "min": 140.749234,
                    "p50": 140.749234,
                    "p95": 140.749234,
                    "p99": 140.749234,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 752.864977,
                    "min": 752.864977,
                    "p50": 752.864977,
                    "p95": 752.864977,
                    "p99": 752.864977,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 130.632971,
                    "min": 130.632971,
                    "p50": 130.632971,
                    "p95": 130.632971,
                    "p99": 130.632971,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 249.456777,
                    "min": 249.456777,
                    "p50": 249.456777,
                    "p95": 249.456777,
                    "p99": 249.456777,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 370.892972,
                    "min": 370.892972,
                    "p50": 370.892972,
                    "p95": 370.892972,
                    "p99": 370.892972,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 143.69032199999998,
                    "min": 143.69032199999998,
                    "p50": 143.69032199999998,
                    "p95": 143.69032199999998,
                    "p99": 143.69032199999998,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 366.23011099999997,
                    "min": 366.23011099999997,
                    "p50": 366.23011099999997,
                    "p95": 366.23011099999997,
                    "p99": 366.23011099999997,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 225.18660699999998,
                    "min": 225.18660699999998,
                    "p50": 225.18660699999998,
                    "p95": 225.18660699999998,
                    "p99": 225.18660699999998,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 445.581175,
                    "min": 445.581175,
                    "p50": 445.581175,
                    "p95": 445.581175,
                    "p99": 445.581175,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 176.316732,
                    "min": 176.316732,
                    "p50": 176.316732,
                    "p95": 176.316732,
                    "p99": 176.316732,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 268.84187399999996,
                    "min": 268.84187399999996,
                    "p50": 268.84187399999996,
                    "p95": 268.84187399999996,
                    "p99": 268.84187399999996,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 933.0605869999999,
                    "min": 933.0605869999999,
                    "p50": 933.0605869999999,
                    "p95": 933.0605869999999,
                    "p99": 933.0605869999999,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 285.597963,
                    "min": 285.597963,
                    "p50": 285.597963,
                    "p95": 285.597963,
                    "p99": 285.597963,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 208.84473699999998,
                    "min": 208.84473699999998,
                    "p50": 208.84473699999998,
                    "p95": 208.84473699999998,
                    "p99": 208.84473699999998,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 330.772809,
                    "min": 330.772809,
                    "p50": 330.772809,
                    "p95": 330.772809,
                    "p99": 330.772809,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 111.131879,
                    "min": 111.131879,
                    "p50": 111.131879,
                    "p95": 111.131879,
                    "p99": 111.131879,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 342.762769,
                    "min": 342.762769,
                    "p50": 342.762769,
                    "p95": 342.762769,
                    "p99": 342.762769,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 491.146643,
                    "min": 491.146643,
                    "p50": 491.146643,
                    "p95": 491.146643,
                    "p99": 491.146643,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 1280.651478,
                    "min": 1280.651478,
                    "p50": 1280.651478,
                    "p95": 1280.651478,
                    "p99": 1280.651478,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 169.20569,
                    "min": 169.20569,
                    "p50": 169.20569,
                    "p95": 169.20569,
                    "p99": 169.20569,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 291.631088,
                    "min": 291.631088,
                    "p50": 291.631088,
                    "p95": 291.631088,
                    "p99": 291.631088,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 249.71655299999998,
                    "min": 249.71655299999998,
                    "p50": 249.71655299999998,
                    "p95": 249.71655299999998,
                    "p99": 249.71655299999998,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 453.46469099999996,
                    "min": 453.46469099999996,
                    "p50": 453.46469099999996,
                    "p95": 453.46469099999996,
                    "p99": 453.46469099999996,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 402.06962699999997,
                    "min": 402.06962699999997,
                    "p50": 402.06962699999997,
                    "p95": 402.06962699999997,
                    "p99": 402.06962699999997,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 535.126362,
                    "min": 535.126362,
                    "p50": 535.126362,
                    "p95": 535.126362,
                    "p99": 535.126362,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 652.437952,
                    "min": 652.437952,
                    "p50": 652.437952,
                    "p95": 652.437952,
                    "p99": 652.437952,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 580.141703,
                    "min": 580.141703,
                    "p50": 580.141703,
                    "p95": 580.141703,
                    "p99": 580.141703,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 498.643377,
                    "min": 498.643377,
                    "p50": 498.643377,
                    "p95": 498.643377,
                    "p99": 498.643377,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 834.186796,
                    "min": 834.186796,
                    "p50": 834.186796,
                    "p95": 834.186796,
                    "p99": 834.186796,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 336.494464,
                    "min": 336.494464,
                    "p50": 336.494464,
                    "p95": 336.494464,
                    "p99": 336.494464,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 186.894023,
                    "min": 186.894023,
                    "p50": 186.894023,
                    "p95": 186.894023,
                    "p99": 186.894023,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 756.020119,
                    "min": 756.020119,
                    "p50": 756.020119,
                    "p95": 756.020119,
                    "p99": 756.020119,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 336.936171,
                    "min": 336.936171,
                    "p50": 336.936171,
                    "p95": 336.936171,
                    "p99": 336.936171,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 625.2841199999999,
                    "min": 625.2841199999999,
                    "p50": 625.2841199999999,
                    "p95": 625.2841199999999,
                    "p99": 625.2841199999999,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 880.676557,
                    "min": 880.676557,
                    "p50": 880.676557,
                    "p95": 880.676557,
                    "p99": 880.676557,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 1993.0220439999998,
                    "min": 1993.0220439999998,
                    "p50": 1993.0220439999998,
                    "p95": 1993.0220439999998,
                    "p99": 1993.0220439999998,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 2794.585732,
                    "min": 2794.585732,
                    "p50": 2794.585732,
                    "p95": 2794.585732,
                    "p99": 2794.585732,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 5558.213570999999,
                    "min": 5558.213570999999,
                    "p50": 5558.213570999999,
                    "p95": 5558.213570999999,
                    "p99": 5558.213570999999,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 1568.871619,
                    "min": 1568.871619,
                    "p50": 1568.871619,
                    "p95": 1568.871619,
                    "p99": 1568.871619,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 715.6662329999999,
                    "min": 715.6662329999999,
                    "p50": 715.6662329999999,
                    "p95": 715.6662329999999,
                    "p99": 715.6662329999999,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 586.055832,
                    "min": 586.055832,
                    "p50": 586.055832,
                    "p95": 586.055832,
                    "p99": 586.055832,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 1685.640054,
                    "min": 1685.640054,
                    "p50": 1685.640054,
                    "p95": 1685.640054,
                    "p99": 1685.640054,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 4238.125360999999,
                    "min": 4238.125360999999,
                    "p50": 4238.125360999999,
                    "p95": 4238.125360999999,
                    "p99": 4238.125360999999,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 2444.089673,
                    "min": 2444.089673,
                    "p50": 2444.089673,
                    "p95": 2444.089673,
                    "p99": 2444.089673,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 2112.29192,
                    "min": 2112.29192,
                    "p50": 2112.29192,
                    "p95": 2112.29192,
                    "p99": 2112.29192,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1146.159562,
                    "min": 1146.159562,
                    "p50": 1146.159562,
                    "p95": 1146.159562,
                    "p99": 1146.159562,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 1420.572946,
                    "min": 1420.572946,
                    "p50": 1420.572946,
                    "p95": 1420.572946,
                    "p99": 1420.572946,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 1012.889831,
                    "min": 1012.889831,
                    "p50": 1012.889831,
                    "p95": 1012.889831,
                    "p99": 1012.889831,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 431.98733599999997,
                    "min": 431.98733599999997,
                    "p50": 431.98733599999997,
                    "p95": 431.98733599999997,
                    "p99": 431.98733599999997,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 1844.3717299999998,
                    "min": 1844.3717299999998,
                    "p50": 1844.3717299999998,
                    "p95": 1844.3717299999998,
                    "p99": 1844.3717299999998,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1295.757654,
                    "min": 1295.757654,
                    "p50": 1295.757654,
                    "p95": 1295.757654,
                    "p99": 1295.757654,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 425.12494599999997,
                    "min": 425.12494599999997,
                    "p50": 425.12494599999997,
                    "p95": 425.12494599999997,
                    "p99": 425.12494599999997,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 1265.678163,
                    "min": 1265.678163,
                    "p50": 1265.678163,
                    "p95": 1265.678163,
                    "p99": 1265.678163,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 2567.274108,
                    "min": 2567.274108,
                    "p50": 2567.274108,
                    "p95": 2567.274108,
                    "p99": 2567.274108,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 1424.329896,
                    "min": 1424.329896,
                    "p50": 1424.329896,
                    "p95": 1424.329896,
                    "p99": 1424.329896,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 3733.002576,
                    "min": 3733.002576,
                    "p50": 3733.002576,
                    "p95": 3733.002576,
                    "p99": 3733.002576,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 798.1948249999999,
                    "min": 798.1948249999999,
                    "p50": 798.1948249999999,
                    "p95": 798.1948249999999,
                    "p99": 798.1948249999999,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1182.554834,
                    "min": 1182.554834,
                    "p50": 1182.554834,
                    "p95": 1182.554834,
                    "p99": 1182.554834,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 4886.874895999999,
                    "min": 4886.874895999999,
                    "p50": 4886.874895999999,
                    "p95": 4886.874895999999,
                    "p99": 4886.874895999999,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 683.249841,
                    "min": 683.249841,
                    "p50": 683.249841,
                    "p95": 683.249841,
                    "p99": 683.249841,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 1717.540607,
                    "min": 1717.540607,
                    "p50": 1717.540607,
                    "p95": 1717.540607,
                    "p99": 1717.540607,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 896.112262,
                    "min": 896.112262,
                    "p50": 896.112262,
                    "p95": 896.112262,
                    "p99": 896.112262,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 548.689845,
                    "min": 548.689845,
                    "p50": 548.689845,
                    "p95": 548.689845,
                    "p99": 548.689845,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 1950.293401,
                    "min": 1950.293401,
                    "p50": 1950.293401,
                    "p95": 1950.293401,
                    "p99": 1950.293401,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 1817.770491,
                    "min": 1817.770491,
                    "p50": 1817.770491,
                    "p95": 1817.770491,
                    "p99": 1817.770491,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 2207.757405,
                    "min": 2207.757405,
                    "p50": 2207.757405,
                    "p95": 2207.757405,
                    "p99": 2207.757405,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1034.661249,
                    "min": 1034.661249,
                    "p50": 1034.661249,
                    "p95": 1034.661249,
                    "p99": 1034.661249,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 1562.681595,
                    "min": 1562.681595,
                    "p50": 1562.681595,
                    "p95": 1562.681595,
                    "p99": 1562.681595,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 871.0347939999999,
                    "min": 871.0347939999999,
                    "p50": 871.0347939999999,
                    "p95": 871.0347939999999,
                    "p99": 871.0347939999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 632.831911,
                    "min": 632.831911,
                    "p50": 632.831911,
                    "p95": 632.831911,
                    "p99": 632.831911,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 1207.865224,
                    "min": 1207.865224,
                    "p50": 1207.865224,
                    "p95": 1207.865224,
                    "p99": 1207.865224,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 1810.943437,
                    "min": 1810.943437,
                    "p50": 1810.943437,
                    "p95": 1810.943437,
                    "p99": 1810.943437,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 5953.248106,
                    "min": 5953.248106,
                    "p50": 5953.248106,
                    "p95": 5953.248106,
                    "p99": 5953.248106,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 2409.116478,
                    "min": 2409.116478,
                    "p50": 2409.116478,
                    "p95": 2409.116478,
                    "p99": 2409.116478,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 697.555423,
                    "min": 697.555423,
                    "p50": 697.555423,
                    "p95": 697.555423,
                    "p99": 697.555423,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 222.422679,
                    "min": 222.422679,
                    "p50": 222.422679,
                    "p95": 222.422679,
                    "p99": 222.422679,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 3001.8775259999998,
                    "min": 3001.8775259999998,
                    "p50": 3001.8775259999998,
                    "p95": 3001.8775259999998,
                    "p99": 3001.8775259999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 455.828648,
                    "min": 455.828648,
                    "p50": 455.828648,
                    "p95": 455.828648,
                    "p99": 455.828648,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 515.892736,
                    "min": 515.892736,
                    "p50": 515.892736,
                    "p95": 515.892736,
                    "p99": 515.892736,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 573.438593,
                    "min": 573.438593,
                    "p50": 573.438593,
                    "p95": 573.438593,
                    "p99": 573.438593,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 1048.603741,
                    "min": 1048.603741,
                    "p50": 1048.603741,
                    "p95": 1048.603741,
                    "p99": 1048.603741,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 331.061373,
                    "min": 331.061373,
                    "p50": 331.061373,
                    "p95": 331.061373,
                    "p99": 331.061373,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 397.004279,
                    "min": 397.004279,
                    "p50": 397.004279,
                    "p95": 397.004279,
                    "p99": 397.004279,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 918.9829699999999,
                    "min": 918.9829699999999,
                    "p50": 918.9829699999999,
                    "p95": 918.9829699999999,
                    "p99": 918.9829699999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 710.1557849999999,
                    "min": 710.1557849999999,
                    "p50": 710.1557849999999,
                    "p95": 710.1557849999999,
                    "p99": 710.1557849999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 282.696533,
                    "min": 282.696533,
                    "p50": 282.696533,
                    "p95": 282.696533,
                    "p99": 282.696533,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 808.614289,
                    "min": 808.614289,
                    "p50": 808.614289,
                    "p95": 808.614289,
                    "p99": 808.614289,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 3365.750184,
                    "min": 3365.750184,
                    "p50": 3365.750184,
                    "p95": 3365.750184,
                    "p99": 3365.750184,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 1376.348896,
                    "min": 1376.348896,
                    "p50": 1376.348896,
                    "p95": 1376.348896,
                    "p99": 1376.348896,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 986.6856819999999,
                    "min": 986.6856819999999,
                    "p50": 986.6856819999999,
                    "p95": 986.6856819999999,
                    "p99": 986.6856819999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 2295.129759,
                    "min": 2295.129759,
                    "p50": 2295.129759,
                    "p95": 2295.129759,
                    "p99": 2295.129759,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1561.431474,
                    "min": 1561.431474,
                    "p50": 1561.431474,
                    "p95": 1561.431474,
                    "p99": 1561.431474,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 7666.8644189999995,
                    "min": 7666.8644189999995,
                    "p50": 7666.8644189999995,
                    "p95": 7666.8644189999995,
                    "p99": 7666.8644189999995,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 2130.6727889999997,
                    "min": 2130.6727889999997,
                    "p50": 2130.6727889999997,
                    "p95": 2130.6727889999997,
                    "p99": 2130.6727889999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 1141.100062,
                    "min": 1141.100062,
                    "p50": 1141.100062,
                    "p95": 1141.100062,
                    "p99": 1141.100062,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 2493.924071,
                    "min": 2493.924071,
                    "p50": 2493.924071,
                    "p95": 2493.924071,
                    "p99": 2493.924071,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 5761.940708,
                    "min": 5761.940708,
                    "p50": 5761.940708,
                    "p95": 5761.940708,
                    "p99": 5761.940708,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 2876.0524419999997,
                    "min": 2876.0524419999997,
                    "p50": 2876.0524419999997,
                    "p95": 2876.0524419999997,
                    "p99": 2876.0524419999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 3866.4907789999997,
                    "min": 3866.4907789999997,
                    "p50": 3866.4907789999997,
                    "p95": 3866.4907789999997,
                    "p99": 3866.4907789999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 612.9397779999999,
                    "min": 612.9397779999999,
                    "p50": 612.9397779999999,
                    "p95": 612.9397779999999,
                    "p99": 612.9397779999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 2719.316115,
                    "min": 2719.316115,
                    "p50": 2719.316115,
                    "p95": 2719.316115,
                    "p99": 2719.316115,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 765.697046,
                    "min": 765.697046,
                    "p50": 765.697046,
                    "p95": 765.697046,
                    "p99": 765.697046,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 1945.527813,
                    "min": 1945.527813,
                    "p50": 1945.527813,
                    "p95": 1945.527813,
                    "p99": 1945.527813,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1755.9881,
                    "min": 1755.9881,
                    "p50": 1755.9881,
                    "p95": 1755.9881,
                    "p99": 1755.9881,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 2892.9200299999998,
                    "min": 2892.9200299999998,
                    "p50": 2892.9200299999998,
                    "p95": 2892.9200299999998,
                    "p99": 2892.9200299999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 803.758787,
                    "min": 803.758787,
                    "p50": 803.758787,
                    "p95": 803.758787,
                    "p99": 803.758787,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1751.604261,
                    "min": 1751.604261,
                    "p50": 1751.604261,
                    "p95": 1751.604261,
                    "p99": 1751.604261,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 2526.1004319999997,
                    "min": 2526.1004319999997,
                    "p50": 2526.1004319999997,
                    "p95": 2526.1004319999997,
                    "p99": 2526.1004319999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 1940.86367,
                    "min": 1940.86367,
                    "p50": 1940.86367,
                    "p95": 1940.86367,
                    "p99": 1940.86367,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 2138.0079889999997,
                    "min": 2138.0079889999997,
                    "p50": 2138.0079889999997,
                    "p95": 2138.0079889999997,
                    "p99": 2138.0079889999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 3844.565321,
                    "min": 3844.565321,
                    "p50": 3844.565321,
                    "p95": 3844.565321,
                    "p99": 3844.565321,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 5745.842968999999,
                    "min": 5745.842968999999,
                    "p50": 5745.842968999999,
                    "p95": 5745.842968999999,
                    "p99": 5745.842968999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 2314.902871,
                    "min": 2314.902871,
                    "p50": 2314.902871,
                    "p95": 2314.902871,
                    "p99": 2314.902871,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 1004.728208,
                    "min": 1004.728208,
                    "p50": 1004.728208,
                    "p95": 1004.728208,
                    "p99": 1004.728208,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 578.31835,
                    "min": 578.31835,
                    "p50": 578.31835,
                    "p95": 578.31835,
                    "p99": 578.31835,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 1190.536158,
                    "min": 1190.536158,
                    "p50": 1190.536158,
                    "p95": 1190.536158,
                    "p99": 1190.536158,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 3421.894205,
                    "min": 3421.894205,
                    "p50": 3421.894205,
                    "p95": 3421.894205,
                    "p99": 3421.894205,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 1382.363553,
                    "min": 1382.363553,
                    "p50": 1382.363553,
                    "p95": 1382.363553,
                    "p99": 1382.363553,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 2702.144751,
                    "min": 2702.144751,
                    "p50": 2702.144751,
                    "p95": 2702.144751,
                    "p99": 2702.144751,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1578.6284759999999,
                    "min": 1578.6284759999999,
                    "p50": 1578.6284759999999,
                    "p95": 1578.6284759999999,
                    "p99": 1578.6284759999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 866.79801,
                    "min": 866.79801,
                    "p50": 866.79801,
                    "p95": 866.79801,
                    "p99": 866.79801,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 140.066865,
                    "min": 140.066865,
                    "p50": 140.066865,
                    "p95": 140.066865,
                    "p99": 140.066865,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 459.055185,
                    "min": 459.055185,
                    "p50": 459.055185,
                    "p95": 459.055185,
                    "p99": 459.055185,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 100.445005,
                    "min": 100.445005,
                    "p50": 100.445005,
                    "p95": 100.445005,
                    "p99": 100.445005,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 66.986826,
                    "min": 66.986826,
                    "p50": 66.986826,
                    "p95": 66.986826,
                    "p99": 66.986826,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 140.205161,
                    "min": 140.205161,
                    "p50": 140.205161,
                    "p95": 140.205161,
                    "p99": 140.205161,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 378.027828,
                    "min": 378.027828,
                    "p50": 378.027828,
                    "p95": 378.027828,
                    "p99": 378.027828,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 164.25377,
                    "min": 164.25377,
                    "p50": 164.25377,
                    "p95": 164.25377,
                    "p99": 164.25377,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 147.257818,
                    "min": 147.257818,
                    "p50": 147.257818,
                    "p95": 147.257818,
                    "p99": 147.257818,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 189.37170999999998,
                    "min": 189.37170999999998,
                    "p50": 189.37170999999998,
                    "p95": 189.37170999999998,
                    "p99": 189.37170999999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 75.738976,
                    "min": 75.738976,
                    "p50": 75.738976,
                    "p95": 75.738976,
                    "p99": 75.738976,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 125.37854999999999,
                    "min": 125.37854999999999,
                    "p50": 125.37854999999999,
                    "p95": 125.37854999999999,
                    "p99": 125.37854999999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 43.864903999999996,
                    "min": 43.864903999999996,
                    "p50": 43.864903999999996,
                    "p95": 43.864903999999996,
                    "p99": 43.864903999999996,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 93.65177299999999,
                    "min": 93.65177299999999,
                    "p50": 93.65177299999999,
                    "p95": 93.65177299999999,
                    "p99": 93.65177299999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 51.493762999999994,
                    "min": 51.493762999999994,
                    "p50": 51.493762999999994,
                    "p95": 51.493762999999994,
                    "p99": 51.493762999999994,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 115.476073,
                    "min": 115.476073,
                    "p50": 115.476073,
                    "p95": 115.476073,
                    "p99": 115.476073,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 122.91954799999999,
                    "min": 122.91954799999999,
                    "p50": 122.91954799999999,
                    "p95": 122.91954799999999,
                    "p99": 122.91954799999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 288.911572,
                    "min": 288.911572,
                    "p50": 288.911572,
                    "p95": 288.911572,
                    "p99": 288.911572,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 207.271539,
                    "min": 207.271539,
                    "p50": 207.271539,
                    "p95": 207.271539,
                    "p99": 207.271539,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 24.937013,
                    "min": 24.937013,
                    "p50": 24.937013,
                    "p95": 24.937013,
                    "p99": 24.937013,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 110.08295,
                    "min": 110.08295,
                    "p50": 110.08295,
                    "p95": 110.08295,
                    "p99": 110.08295,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 92.327708,
                    "min": 92.327708,
                    "p50": 92.327708,
                    "p95": 92.327708,
                    "p99": 92.327708,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 67.671318,
                    "min": 67.671318,
                    "p50": 67.671318,
                    "p95": 67.671318,
                    "p99": 67.671318,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 40.107456,
                    "min": 40.107456,
                    "p50": 40.107456,
                    "p95": 40.107456,
                    "p99": 40.107456,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 207.572597,
                    "min": 207.572597,
                    "p50": 207.572597,
                    "p95": 207.572597,
                    "p99": 207.572597,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 123.402603,
                    "min": 123.402603,
                    "p50": 123.402603,
                    "p95": 123.402603,
                    "p99": 123.402603,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 41.08425,
                    "min": 41.08425,
                    "p50": 41.08425,
                    "p95": 41.08425,
                    "p99": 41.08425,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 47.781285,
                    "min": 47.781285,
                    "p50": 47.781285,
                    "p95": 47.781285,
                    "p99": 47.781285,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 28.377019999999998,
                    "min": 28.377019999999998,
                    "p50": 28.377019999999998,
                    "p95": 28.377019999999998,
                    "p99": 28.377019999999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 24.645571999999998,
                    "min": 24.645571999999998,
                    "p50": 24.645571999999998,
                    "p95": 24.645571999999998,
                    "p99": 24.645571999999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 24.332110999999998,
                    "min": 24.332110999999998,
                    "p50": 24.332110999999998,
                    "p95": 24.332110999999998,
                    "p99": 24.332110999999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 59.364056999999995,
                    "min": 59.364056999999995,
                    "p50": 59.364056999999995,
                    "p95": 59.364056999999995,
                    "p99": 59.364056999999995,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 39.442375,
                    "min": 39.442375,
                    "p50": 39.442375,
                    "p95": 39.442375,
                    "p99": 39.442375,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 50.861391,
                    "min": 50.861391,
                    "p50": 50.861391,
                    "p95": 50.861391,
                    "p99": 50.861391,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 26.231057999999997,
                    "min": 26.231057999999997,
                    "p50": 26.231057999999997,
                    "p95": 26.231057999999997,
                    "p99": 26.231057999999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 47.337027,
                    "min": 47.337027,
                    "p50": 47.337027,
                    "p95": 47.337027,
                    "p99": 47.337027,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 24.617742999999997,
                    "min": 24.617742999999997,
                    "p50": 24.617742999999997,
                    "p95": 24.617742999999997,
                    "p99": 24.617742999999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 24.516845999999997,
                    "min": 24.516845999999997,
                    "p50": 24.516845999999997,
                    "p95": 24.516845999999997,
                    "p99": 24.516845999999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 196.696306,
                    "min": 196.696306,
                    "p50": 196.696306,
                    "p95": 196.696306,
                    "p99": 196.696306,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 116.927932,
                    "min": 116.927932,
                    "p50": 116.927932,
                    "p95": 116.927932,
                    "p99": 116.927932,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 231.15096799999998,
                    "min": 231.15096799999998,
                    "p50": 231.15096799999998,
                    "p95": 231.15096799999998,
                    "p99": 231.15096799999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 108.01544799999999,
                    "min": 108.01544799999999,
                    "p50": 108.01544799999999,
                    "p95": 108.01544799999999,
                    "p99": 108.01544799999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 97.96033399999999,
                    "min": 97.96033399999999,
                    "p50": 97.96033399999999,
                    "p95": 97.96033399999999,
                    "p99": 97.96033399999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 76.835286,
                    "min": 76.835286,
                    "p50": 76.835286,
                    "p95": 76.835286,
                    "p99": 76.835286,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 173.39865799999998,
                    "min": 173.39865799999998,
                    "p50": 173.39865799999998,
                    "p95": 173.39865799999998,
                    "p99": 173.39865799999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 145.219405,
                    "min": 145.219405,
                    "p50": 145.219405,
                    "p95": 145.219405,
                    "p99": 145.219405,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 328.20968999999997,
                    "min": 328.20968999999997,
                    "p50": 328.20968999999997,
                    "p95": 328.20968999999997,
                    "p99": 328.20968999999997,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 126.47832,
                    "min": 126.47832,
                    "p50": 126.47832,
                    "p95": 126.47832,
                    "p99": 126.47832,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 998.2608759999999,
                    "min": 998.2608759999999,
                    "p50": 998.2608759999999,
                    "p95": 998.2608759999999,
                    "p99": 998.2608759999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 90.24604699999999,
                    "min": 90.24604699999999,
                    "p50": 90.24604699999999,
                    "p95": 90.24604699999999,
                    "p99": 90.24604699999999,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 164.65323999999998,
                    "min": 164.65323999999998,
                    "p50": 164.65323999999998,
                    "p95": 164.65323999999998,
                    "p99": 164.65323999999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 156.34913899999998,
                    "min": 156.34913899999998,
                    "p50": 156.34913899999998,
                    "p95": 156.34913899999998,
                    "p99": 156.34913899999998,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 416.024956,
                    "min": 416.024956,
                    "p50": 416.024956,
                    "p95": 416.024956,
                    "p99": 416.024956,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 58.212118,
                    "min": 58.212118,
                    "p50": 58.212118,
                    "p95": 58.212118,
                    "p99": 58.212118,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 184.787917,
                    "min": 184.787917,
                    "p50": 184.787917,
                    "p95": 184.787917,
                    "p99": 184.787917,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 135.396425,
                    "min": 135.396425,
                    "p50": 135.396425,
                    "p95": 135.396425,
                    "p99": 135.396425,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 520.753616,
                    "min": 520.753616,
                    "p50": 520.753616,
                    "p95": 520.753616,
                    "p99": 520.753616,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 1126.879404,
                    "min": 1126.879404,
                    "p50": 1126.879404,
                    "p95": 1126.879404,
                    "p99": 1126.879404,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 968.865631,
                    "min": 968.865631,
                    "p50": 968.865631,
                    "p95": 968.865631,
                    "p99": 968.865631,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1442.65979,
                    "min": 1442.65979,
                    "p50": 1442.65979,
                    "p95": 1442.65979,
                    "p99": 1442.65979,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 500.65103999999997,
                    "min": 500.65103999999997,
                    "p50": 500.65103999999997,
                    "p95": 500.65103999999997,
                    "p99": 500.65103999999997,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 657.293372,
                    "min": 657.293372,
                    "p50": 657.293372,
                    "p95": 657.293372,
                    "p99": 657.293372,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1279.261875,
                    "min": 1279.261875,
                    "p50": 1279.261875,
                    "p95": 1279.261875,
                    "p99": 1279.261875,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 808.692549,
                    "min": 808.692549,
                    "p50": 808.692549,
                    "p95": 808.692549,
                    "p99": 808.692549,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 1483.797707,
                    "min": 1483.797707,
                    "p50": 1483.797707,
                    "p95": 1483.797707,
                    "p99": 1483.797707,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 472.435886,
                    "min": 472.435886,
                    "p50": 472.435886,
                    "p95": 472.435886,
                    "p99": 472.435886,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1191.77991,
                    "min": 1191.77991,
                    "p50": 1191.77991,
                    "p95": 1191.77991,
                    "p99": 1191.77991,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 899.4133919999999,
                    "min": 899.4133919999999,
                    "p50": 899.4133919999999,
                    "p95": 899.4133919999999,
                    "p99": 899.4133919999999,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 1048.5241409999999,
                    "min": 1048.5241409999999,
                    "p50": 1048.5241409999999,
                    "p95": 1048.5241409999999,
                    "p99": 1048.5241409999999,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1317.642251,
                    "min": 1317.642251,
                    "p50": 1317.642251,
                    "p95": 1317.642251,
                    "p99": 1317.642251,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 586.533159,
                    "min": 586.533159,
                    "p50": 586.533159,
                    "p95": 586.533159,
                    "p99": 586.533159,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 759.694657,
                    "min": 759.694657,
                    "p50": 759.694657,
                    "p95": 759.694657,
                    "p99": 759.694657,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 166.49572,
                    "min": 166.49572,
                    "p50": 166.49572,
                    "p95": 166.49572,
                    "p99": 166.49572,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 264.741488,
                    "min": 264.741488,
                    "p50": 264.741488,
                    "p95": 264.741488,
                    "p99": 264.741488,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 332.72997899999996,
                    "min": 332.72997899999996,
                    "p50": 332.72997899999996,
                    "p95": 332.72997899999996,
                    "p99": 332.72997899999996,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 230.815072,
                    "min": 230.815072,
                    "p50": 230.815072,
                    "p95": 230.815072,
                    "p99": 230.815072,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 423.471383,
                    "min": 423.471383,
                    "p50": 423.471383,
                    "p95": 423.471383,
                    "p99": 423.471383,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 141.632724,
                    "min": 141.632724,
                    "p50": 141.632724,
                    "p95": 141.632724,
                    "p99": 141.632724,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 363.00602599999996,
                    "min": 363.00602599999996,
                    "p50": 363.00602599999996,
                    "p95": 363.00602599999996,
                    "p99": 363.00602599999996,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 288.895104,
                    "min": 288.895104,
                    "p50": 288.895104,
                    "p95": 288.895104,
                    "p99": 288.895104,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 196.776049,
                    "min": 196.776049,
                    "p50": 196.776049,
                    "p95": 196.776049,
                    "p99": 196.776049,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 391.497093,
                    "min": 391.497093,
                    "p50": 391.497093,
                    "p95": 391.497093,
                    "p99": 391.497093,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 984.163911,
                    "min": 984.163911,
                    "p50": 984.163911,
                    "p95": 984.163911,
                    "p99": 984.163911,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 1296.9792169999998,
                    "min": 1296.9792169999998,
                    "p50": 1296.9792169999998,
                    "p95": 1296.9792169999998,
                    "p99": 1296.9792169999998,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 360.074747,
                    "min": 360.074747,
                    "p50": 360.074747,
                    "p95": 360.074747,
                    "p99": 360.074747,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 669.659762,
                    "min": 669.659762,
                    "p50": 669.659762,
                    "p95": 669.659762,
                    "p99": 669.659762,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 1127.522659,
                    "min": 1127.522659,
                    "p50": 1127.522659,
                    "p95": 1127.522659,
                    "p99": 1127.522659,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 513.6379039999999,
                    "min": 513.6379039999999,
                    "p50": 513.6379039999999,
                    "p95": 513.6379039999999,
                    "p99": 513.6379039999999,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 828.5168239999999,
                    "min": 828.5168239999999,
                    "p50": 828.5168239999999,
                    "p95": 828.5168239999999,
                    "p99": 828.5168239999999,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 343.555541,
                    "min": 343.555541,
                    "p50": 343.555541,
                    "p95": 343.555541,
                    "p99": 343.555541,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 191.484874,
                    "min": 191.484874,
                    "p50": 191.484874,
                    "p95": 191.484874,
                    "p99": 191.484874,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 127.724718,
                    "min": 127.724718,
                    "p50": 127.724718,
                    "p95": 127.724718,
                    "p99": 127.724718,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 315.96367,
                    "min": 315.96367,
                    "p50": 315.96367,
                    "p95": 315.96367,
                    "p99": 315.96367,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 257.714883,
                    "min": 257.714883,
                    "p50": 257.714883,
                    "p95": 257.714883,
                    "p99": 257.714883,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 209.213887,
                    "min": 209.213887,
                    "p50": 209.213887,
                    "p95": 209.213887,
                    "p99": 209.213887,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 303.92378099999996,
                    "min": 303.92378099999996,
                    "p50": 303.92378099999996,
                    "p95": 303.92378099999996,
                    "p99": 303.92378099999996,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 152.061769,
                    "min": 152.061769,
                    "p50": 152.061769,
                    "p95": 152.061769,
                    "p99": 152.061769,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 104.696551,
                    "min": 104.696551,
                    "p50": 104.696551,
                    "p95": 104.696551,
                    "p99": 104.696551,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 418.988787,
                    "min": 418.988787,
                    "p50": 418.988787,
                    "p95": 418.988787,
                    "p99": 418.988787,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 340.24049299999996,
                    "min": 340.24049299999996,
                    "p50": 340.24049299999996,
                    "p95": 340.24049299999996,
                    "p99": 340.24049299999996,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 469.283796,
                    "min": 469.283796,
                    "p50": 469.283796,
                    "p95": 469.283796,
                    "p99": 469.283796,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 231.00733799999998,
                    "min": 231.00733799999998,
                    "p50": 231.00733799999998,
                    "p95": 231.00733799999998,
                    "p99": 231.00733799999998,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 278.008125,
                    "min": 278.008125,
                    "p50": 278.008125,
                    "p95": 278.008125,
                    "p99": 278.008125,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 162.66692799999998,
                    "min": 162.66692799999998,
                    "p50": 162.66692799999998,
                    "p95": 162.66692799999998,
                    "p99": 162.66692799999998,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 308.066008,
                    "min": 308.066008,
                    "p50": 308.066008,
                    "p95": 308.066008,
                    "p99": 308.066008,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 141.039241,
                    "min": 141.039241,
                    "p50": 141.039241,
                    "p95": 141.039241,
                    "p99": 141.039241,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 346.12241,
                    "min": 346.12241,
                    "p50": 346.12241,
                    "p95": 346.12241,
                    "p99": 346.12241,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 248.460458,
                    "min": 248.460458,
                    "p50": 248.460458,
                    "p95": 248.460458,
                    "p99": 248.460458,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 120.939184,
                    "min": 120.939184,
                    "p50": 120.939184,
                    "p95": 120.939184,
                    "p99": 120.939184,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 162.108271,
                    "min": 162.108271,
                    "p50": 162.108271,
                    "p95": 162.108271,
                    "p99": 162.108271,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 286.339686,
                    "min": 286.339686,
                    "p50": 286.339686,
                    "p95": 286.339686,
                    "p99": 286.339686,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 333.424171,
                    "min": 333.424171,
                    "p50": 333.424171,
                    "p95": 333.424171,
                    "p99": 333.424171,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 458.120322,
                    "min": 458.120322,
                    "p50": 458.120322,
                    "p95": 458.120322,
                    "p99": 458.120322,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 181.704863,
                    "min": 181.704863,
                    "p50": 181.704863,
                    "p95": 181.704863,
                    "p99": 181.704863,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 402.977079,
                    "min": 402.977079,
                    "p50": 402.977079,
                    "p95": 402.977079,
                    "p99": 402.977079,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 207.064606,
                    "min": 207.064606,
                    "p50": 207.064606,
                    "p95": 207.064606,
                    "p99": 207.064606,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 262.34905599999996,
                    "min": 262.34905599999996,
                    "p50": 262.34905599999996,
                    "p95": 262.34905599999996,
                    "p99": 262.34905599999996,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 220.32094099999998,
                    "min": 220.32094099999998,
                    "p50": 220.32094099999998,
                    "p95": 220.32094099999998,
                    "p99": 220.32094099999998,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 62.653557,
                    "min": 62.653557,
                    "p50": 62.653557,
                    "p95": 62.653557,
                    "p99": 62.653557,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 146.081762,
                    "min": 146.081762,
                    "p50": 146.081762,
                    "p95": 146.081762,
                    "p99": 146.081762,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 209.686953,
                    "min": 209.686953,
                    "p50": 209.686953,
                    "p95": 209.686953,
                    "p99": 209.686953,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 188.190855,
                    "min": 188.190855,
                    "p50": 188.190855,
                    "p95": 188.190855,
                    "p99": 188.190855,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 402.86398099999997,
                    "min": 402.86398099999997,
                    "p50": 402.86398099999997,
                    "p95": 402.86398099999997,
                    "p99": 402.86398099999997,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 363.213691,
                    "min": 363.213691,
                    "p50": 363.213691,
                    "p95": 363.213691,
                    "p99": 363.213691,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 103.66385,
                    "min": 103.66385,
                    "p50": 103.66385,
                    "p95": 103.66385,
                    "p99": 103.66385,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 275.633291,
                    "min": 275.633291,
                    "p50": 275.633291,
                    "p95": 275.633291,
                    "p99": 275.633291,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 250.623238,
                    "min": 250.623238,
                    "p50": 250.623238,
                    "p95": 250.623238,
                    "p99": 250.623238,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 104.574745,
                    "min": 104.574745,
                    "p50": 104.574745,
                    "p95": 104.574745,
                    "p99": 104.574745,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 301.041041,
                    "min": 301.041041,
                    "p50": 301.041041,
                    "p95": 301.041041,
                    "p99": 301.041041,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 235.374338,
                    "min": 235.374338,
                    "p50": 235.374338,
                    "p95": 235.374338,
                    "p99": 235.374338,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 455.810675,
                    "min": 455.810675,
                    "p50": 455.810675,
                    "p95": 455.810675,
                    "p99": 455.810675,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 341.893268,
                    "min": 341.893268,
                    "p50": 341.893268,
                    "p95": 341.893268,
                    "p99": 341.893268,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 130.023205,
                    "min": 130.023205,
                    "p50": 130.023205,
                    "p95": 130.023205,
                    "p99": 130.023205,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 323.569753,
                    "min": 323.569753,
                    "p50": 323.569753,
                    "p95": 323.569753,
                    "p99": 323.569753,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 475.456704,
                    "min": 475.456704,
                    "p50": 475.456704,
                    "p95": 475.456704,
                    "p99": 475.456704,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 126.980688,
                    "min": 126.980688,
                    "p50": 126.980688,
                    "p95": 126.980688,
                    "p99": 126.980688,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 234.50486099999998,
                    "min": 234.50486099999998,
                    "p50": 234.50486099999998,
                    "p95": 234.50486099999998,
                    "p99": 234.50486099999998,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 253.382512,
                    "min": 253.382512,
                    "p50": 253.382512,
                    "p95": 253.382512,
                    "p99": 253.382512,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 276.754239,
                    "min": 276.754239,
                    "p50": 276.754239,
                    "p95": 276.754239,
                    "p99": 276.754239,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 414.93458899999996,
                    "min": 414.93458899999996,
                    "p50": 414.93458899999996,
                    "p95": 414.93458899999996,
                    "p99": 414.93458899999996,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 305.90448699999996,
                    "min": 305.90448699999996,
                    "p50": 305.90448699999996,
                    "p95": 305.90448699999996,
                    "p99": 305.90448699999996,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 322.962749,
                    "min": 322.962749,
                    "p50": 322.962749,
                    "p95": 322.962749,
                    "p99": 322.962749,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 84.331661,
                    "min": 84.331661,
                    "p50": 84.331661,
                    "p95": 84.331661,
                    "p99": 84.331661,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 164.125477,
                    "min": 164.125477,
                    "p50": 164.125477,
                    "p95": 164.125477,
                    "p99": 164.125477,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 146.396124,
                    "min": 146.396124,
                    "p50": 146.396124,
                    "p95": 146.396124,
                    "p99": 146.396124,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 361.409042,
                    "min": 361.409042,
                    "p50": 361.409042,
                    "p95": 361.409042,
                    "p99": 361.409042,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 211.744158,
                    "min": 211.744158,
                    "p50": 211.744158,
                    "p95": 211.744158,
                    "p99": 211.744158,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 306.238019,
                    "min": 306.238019,
                    "p50": 306.238019,
                    "p95": 306.238019,
                    "p99": 306.238019,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 187.65469,
                    "min": 187.65469,
                    "p50": 187.65469,
                    "p95": 187.65469,
                    "p99": 187.65469,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 114.22699899999999,
                    "min": 114.22699899999999,
                    "p50": 114.22699899999999,
                    "p95": 114.22699899999999,
                    "p99": 114.22699899999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 52.441117,
                    "min": 52.441117,
                    "p50": 52.441117,
                    "p95": 52.441117,
                    "p99": 52.441117,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 691.906176,
                    "min": 691.906176,
                    "p50": 691.906176,
                    "p95": 691.906176,
                    "p99": 691.906176,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 154.907691,
                    "min": 154.907691,
                    "p50": 154.907691,
                    "p95": 154.907691,
                    "p99": 154.907691,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 231.69899999999998,
                    "min": 231.69899999999998,
                    "p50": 231.69899999999998,
                    "p95": 231.69899999999998,
                    "p99": 231.69899999999998,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 106.978848,
                    "min": 106.978848,
                    "p50": 106.978848,
                    "p95": 106.978848,
                    "p99": 106.978848,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 298.356117,
                    "min": 298.356117,
                    "p50": 298.356117,
                    "p95": 298.356117,
                    "p99": 298.356117,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 40.33157,
                    "min": 40.33157,
                    "p50": 40.33157,
                    "p95": 40.33157,
                    "p99": 40.33157,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 53.707173999999995,
                    "min": 53.707173999999995,
                    "p50": 53.707173999999995,
                    "p95": 53.707173999999995,
                    "p99": 53.707173999999995,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 23.005177999999997,
                    "min": 23.005177999999997,
                    "p50": 23.005177999999997,
                    "p95": 23.005177999999997,
                    "p99": 23.005177999999997,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 98.15614199999999,
                    "min": 98.15614199999999,
                    "p50": 98.15614199999999,
                    "p95": 98.15614199999999,
                    "p99": 98.15614199999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 85.029631,
                    "min": 85.029631,
                    "p50": 85.029631,
                    "p95": 85.029631,
                    "p99": 85.029631,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 111.107445,
                    "min": 111.107445,
                    "p50": 111.107445,
                    "p95": 111.107445,
                    "p99": 111.107445,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 110.08806299999999,
                    "min": 110.08806299999999,
                    "p50": 110.08806299999999,
                    "p95": 110.08806299999999,
                    "p99": 110.08806299999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 120.132717,
                    "min": 120.132717,
                    "p50": 120.132717,
                    "p95": 120.132717,
                    "p99": 120.132717,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 366.178723,
                    "min": 366.178723,
                    "p50": 366.178723,
                    "p95": 366.178723,
                    "p99": 366.178723,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 64.868916,
                    "min": 64.868916,
                    "p50": 64.868916,
                    "p95": 64.868916,
                    "p99": 64.868916,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 129.929978,
                    "min": 129.929978,
                    "p50": 129.929978,
                    "p95": 129.929978,
                    "p99": 129.929978,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 135.582423,
                    "min": 135.582423,
                    "p50": 135.582423,
                    "p95": 135.582423,
                    "p99": 135.582423,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 260.214205,
                    "min": 260.214205,
                    "p50": 260.214205,
                    "p95": 260.214205,
                    "p99": 260.214205,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 45.512519,
                    "min": 45.512519,
                    "p50": 45.512519,
                    "p95": 45.512519,
                    "p99": 45.512519,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 315.820476,
                    "min": 315.820476,
                    "p50": 315.820476,
                    "p95": 315.820476,
                    "p99": 315.820476,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 171.85384499999998,
                    "min": 171.85384499999998,
                    "p50": 171.85384499999998,
                    "p95": 171.85384499999998,
                    "p99": 171.85384499999998,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 142.694917,
                    "min": 142.694917,
                    "p50": 142.694917,
                    "p95": 142.694917,
                    "p99": 142.694917,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 113.581277,
                    "min": 113.581277,
                    "p50": 113.581277,
                    "p95": 113.581277,
                    "p99": 113.581277,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 98.239769,
                    "min": 98.239769,
                    "p50": 98.239769,
                    "p95": 98.239769,
                    "p99": 98.239769,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 131.967072,
                    "min": 131.967072,
                    "p50": 131.967072,
                    "p95": 131.967072,
                    "p99": 131.967072,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 24.230584,
                    "min": 24.230584,
                    "p50": 24.230584,
                    "p95": 24.230584,
                    "p99": 24.230584,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 742.166295,
                    "min": 742.166295,
                    "p50": 742.166295,
                    "p95": 742.166295,
                    "p99": 742.166295,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 60.119547,
                    "min": 60.119547,
                    "p50": 60.119547,
                    "p95": 60.119547,
                    "p99": 60.119547,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 74.51440199999999,
                    "min": 74.51440199999999,
                    "p50": 74.51440199999999,
                    "p95": 74.51440199999999,
                    "p99": 74.51440199999999,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 98.76478499999999,
                    "min": 98.76478499999999,
                    "p50": 98.76478499999999,
                    "p95": 98.76478499999999,
                    "p99": 98.76478499999999,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 127.598512,
                    "min": 127.598512,
                    "p50": 127.598512,
                    "p95": 127.598512,
                    "p99": 127.598512,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 106.11389299999999,
                    "min": 106.11389299999999,
                    "p50": 106.11389299999999,
                    "p95": 106.11389299999999,
                    "p99": 106.11389299999999,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 117.71016399999999,
                    "min": 117.71016399999999,
                    "p50": 117.71016399999999,
                    "p95": 117.71016399999999,
                    "p99": 117.71016399999999,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 91.967731,
                    "min": 91.967731,
                    "p50": 91.967731,
                    "p95": 91.967731,
                    "p99": 91.967731,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 114.355936,
                    "min": 114.355936,
                    "p50": 114.355936,
                    "p95": 114.355936,
                    "p99": 114.355936,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 412.801131,
                    "min": 412.801131,
                    "p50": 412.801131,
                    "p95": 412.801131,
                    "p99": 412.801131,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 124.221465,
                    "min": 124.221465,
                    "p50": 124.221465,
                    "p95": 124.221465,
                    "p99": 124.221465,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 707.861407,
                    "min": 707.861407,
                    "p50": 707.861407,
                    "p95": 707.861407,
                    "p99": 707.861407,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 133.878939,
                    "min": 133.878939,
                    "p50": 133.878939,
                    "p95": 133.878939,
                    "p99": 133.878939,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 60.504706999999996,
                    "min": 60.504706999999996,
                    "p50": 60.504706999999996,
                    "p95": 60.504706999999996,
                    "p99": 60.504706999999996,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 116.87098599999999,
                    "min": 116.87098599999999,
                    "p50": 116.87098599999999,
                    "p95": 116.87098599999999,
                    "p99": 116.87098599999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 132.387059,
                    "min": 132.387059,
                    "p50": 132.387059,
                    "p95": 132.387059,
                    "p99": 132.387059,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 33.886099,
                    "min": 33.886099,
                    "p50": 33.886099,
                    "p95": 33.886099,
                    "p99": 33.886099,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 85.590007,
                    "min": 85.590007,
                    "p50": 85.590007,
                    "p95": 85.590007,
                    "p99": 85.590007,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 48.675191,
                    "min": 48.675191,
                    "p50": 48.675191,
                    "p95": 48.675191,
                    "p99": 48.675191,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 138.343826,
                    "min": 138.343826,
                    "p50": 138.343826,
                    "p95": 138.343826,
                    "p99": 138.343826,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 118.92202999999999,
                    "min": 118.92202999999999,
                    "p50": 118.92202999999999,
                    "p95": 118.92202999999999,
                    "p99": 118.92202999999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 300.46585899999997,
                    "min": 300.46585899999997,
                    "p50": 300.46585899999997,
                    "p95": 300.46585899999997,
                    "p99": 300.46585899999997,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 237.010654,
                    "min": 237.010654,
                    "p50": 237.010654,
                    "p95": 237.010654,
                    "p99": 237.010654,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 113.691105,
                    "min": 113.691105,
                    "p50": 113.691105,
                    "p95": 113.691105,
                    "p99": 113.691105,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 39.707918,
                    "min": 39.707918,
                    "p50": 39.707918,
                    "p95": 39.707918,
                    "p99": 39.707918,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 92.833558,
                    "min": 92.833558,
                    "p50": 92.833558,
                    "p95": 92.833558,
                    "p99": 92.833558,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 52.878706,
                    "min": 52.878706,
                    "p50": 52.878706,
                    "p95": 52.878706,
                    "p99": 52.878706,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 79.516165,
                    "min": 79.516165,
                    "p50": 79.516165,
                    "p95": 79.516165,
                    "p99": 79.516165,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 370.691629,
                    "min": 370.691629,
                    "p50": 370.691629,
                    "p95": 370.691629,
                    "p99": 370.691629,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 122.997108,
                    "min": 122.997108,
                    "p50": 122.997108,
                    "p95": 122.997108,
                    "p99": 122.997108,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 93.99013599999999,
                    "min": 93.99013599999999,
                    "p50": 93.99013599999999,
                    "p95": 93.99013599999999,
                    "p99": 93.99013599999999,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 59.954212,
                    "min": 59.954212,
                    "p50": 59.954212,
                    "p95": 59.954212,
                    "p99": 59.954212,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 99.963411,
                    "min": 99.963411,
                    "p50": 99.963411,
                    "p95": 99.963411,
                    "p99": 99.963411,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 174.76618499999998,
                    "min": 174.76618499999998,
                    "p50": 174.76618499999998,
                    "p95": 174.76618499999998,
                    "p99": 174.76618499999998,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 48.275883,
                    "min": 48.275883,
                    "p50": 48.275883,
                    "p95": 48.275883,
                    "p99": 48.275883,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 781.284508,
                    "min": 781.284508,
                    "p50": 781.284508,
                    "p95": 781.284508,
                    "p99": 781.284508,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 176.317092,
                    "min": 176.317092,
                    "p50": 176.317092,
                    "p95": 176.317092,
                    "p99": 176.317092,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 79.383268,
                    "min": 79.383268,
                    "p50": 79.383268,
                    "p95": 79.383268,
                    "p99": 79.383268,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 117.632086,
                    "min": 117.632086,
                    "p50": 117.632086,
                    "p95": 117.632086,
                    "p99": 117.632086,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 105.947687,
                    "min": 105.947687,
                    "p50": 105.947687,
                    "p95": 105.947687,
                    "p99": 105.947687,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 84.281733,
                    "min": 84.281733,
                    "p50": 84.281733,
                    "p95": 84.281733,
                    "p99": 84.281733,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 129.252357,
                    "min": 129.252357,
                    "p50": 129.252357,
                    "p95": 129.252357,
                    "p99": 129.252357,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 411.275623,
                    "min": 411.275623,
                    "p50": 411.275623,
                    "p95": 411.275623,
                    "p99": 411.275623,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 263.490595,
                    "min": 263.490595,
                    "p50": 263.490595,
                    "p95": 263.490595,
                    "p99": 263.490595,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 136.11713899999998,
                    "min": 136.11713899999998,
                    "p50": 136.11713899999998,
                    "p95": 136.11713899999998,
                    "p99": 136.11713899999998,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 108.05954899999999,
                    "min": 108.05954899999999,
                    "p50": 108.05954899999999,
                    "p95": 108.05954899999999,
                    "p99": 108.05954899999999,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 148.239644,
                    "min": 148.239644,
                    "p50": 148.239644,
                    "p95": 148.239644,
                    "p99": 148.239644,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 337.472512,
                    "min": 337.472512,
                    "p50": 337.472512,
                    "p95": 337.472512,
                    "p99": 337.472512,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 93.011442,
                    "min": 93.011442,
                    "p50": 93.011442,
                    "p95": 93.011442,
                    "p99": 93.011442,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 138.40812499999998,
                    "min": 138.40812499999998,
                    "p50": 138.40812499999998,
                    "p95": 138.40812499999998,
                    "p99": 138.40812499999998,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 124.687461,
                    "min": 124.687461,
                    "p50": 124.687461,
                    "p95": 124.687461,
                    "p99": 124.687461,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 77.18310799999999,
                    "min": 77.18310799999999,
                    "p50": 77.18310799999999,
                    "p95": 77.18310799999999,
                    "p99": 77.18310799999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 151.9804,
                    "min": 151.9804,
                    "p50": 151.9804,
                    "p95": 151.9804,
                    "p99": 151.9804,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 57.097139999999996,
                    "min": 57.097139999999996,
                    "p50": 57.097139999999996,
                    "p95": 57.097139999999996,
                    "p99": 57.097139999999996,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 103.686579,
                    "min": 103.686579,
                    "p50": 103.686579,
                    "p95": 103.686579,
                    "p99": 103.686579,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 120.25733299999999,
                    "min": 120.25733299999999,
                    "p50": 120.25733299999999,
                    "p95": 120.25733299999999,
                    "p99": 120.25733299999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 115.86848499999999,
                    "min": 115.86848499999999,
                    "p50": 115.86848499999999,
                    "p95": 115.86848499999999,
                    "p99": 115.86848499999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 264.637404,
                    "min": 264.637404,
                    "p50": 264.637404,
                    "p95": 264.637404,
                    "p99": 264.637404,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 130.459283,
                    "min": 130.459283,
                    "p50": 130.459283,
                    "p95": 130.459283,
                    "p99": 130.459283,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 108.974514,
                    "min": 108.974514,
                    "p50": 108.974514,
                    "p95": 108.974514,
                    "p99": 108.974514,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 75.051626,
                    "min": 75.051626,
                    "p50": 75.051626,
                    "p95": 75.051626,
                    "p99": 75.051626,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 146.619819,
                    "min": 146.619819,
                    "p50": 146.619819,
                    "p95": 146.619819,
                    "p99": 146.619819,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 174.918541,
                    "min": 174.918541,
                    "p50": 174.918541,
                    "p95": 174.918541,
                    "p99": 174.918541,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 345.61643799999996,
                    "min": 345.61643799999996,
                    "p50": 345.61643799999996,
                    "p95": 345.61643799999996,
                    "p99": 345.61643799999996,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 415.334862,
                    "min": 415.334862,
                    "p50": 415.334862,
                    "p95": 415.334862,
                    "p99": 415.334862,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 778.927425,
                    "min": 778.927425,
                    "p50": 778.927425,
                    "p95": 778.927425,
                    "p99": 778.927425,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 45.960575999999996,
                    "min": 45.960575999999996,
                    "p50": 45.960575999999996,
                    "p95": 45.960575999999996,
                    "p99": 45.960575999999996,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 377.457061,
                    "min": 377.457061,
                    "p50": 377.457061,
                    "p95": 377.457061,
                    "p99": 377.457061,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 126.167091,
                    "min": 126.167091,
                    "p50": 126.167091,
                    "p95": 126.167091,
                    "p99": 126.167091,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 106.928609,
                    "min": 106.928609,
                    "p50": 106.928609,
                    "p95": 106.928609,
                    "p99": 106.928609,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 136.54449499999998,
                    "min": 136.54449499999998,
                    "p50": 136.54449499999998,
                    "p95": 136.54449499999998,
                    "p99": 136.54449499999998,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 86.726056,
                    "min": 86.726056,
                    "p50": 86.726056,
                    "p95": 86.726056,
                    "p99": 86.726056,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 65.664294,
                    "min": 65.664294,
                    "p50": 65.664294,
                    "p95": 65.664294,
                    "p99": 65.664294,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 30.306096,
                    "min": 30.306096,
                    "p50": 30.306096,
                    "p95": 30.306096,
                    "p99": 30.306096,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 73.83624,
                    "min": 73.83624,
                    "p50": 73.83624,
                    "p95": 73.83624,
                    "p99": 73.83624,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 141.212398,
                    "min": 141.212398,
                    "p50": 141.212398,
                    "p95": 141.212398,
                    "p99": 141.212398,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 79.026078,
                    "min": 79.026078,
                    "p50": 79.026078,
                    "p95": 79.026078,
                    "p99": 79.026078,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 94.33397599999999,
                    "min": 94.33397599999999,
                    "p50": 94.33397599999999,
                    "p95": 94.33397599999999,
                    "p99": 94.33397599999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 133.207718,
                    "min": 133.207718,
                    "p50": 133.207718,
                    "p95": 133.207718,
                    "p99": 133.207718,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 306.445784,
                    "min": 306.445784,
                    "p50": 306.445784,
                    "p95": 306.445784,
                    "p99": 306.445784,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 99.845326,
                    "min": 99.845326,
                    "p50": 99.845326,
                    "p95": 99.845326,
                    "p99": 99.845326,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 170.164332,
                    "min": 170.164332,
                    "p50": 170.164332,
                    "p95": 170.164332,
                    "p99": 170.164332,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 117.86363999999999,
                    "min": 117.86363999999999,
                    "p50": 117.86363999999999,
                    "p95": 117.86363999999999,
                    "p99": 117.86363999999999,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 52.509197,
                    "min": 52.509197,
                    "p50": 52.509197,
                    "p95": 52.509197,
                    "p99": 52.509197,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 236.110379,
                    "min": 236.110379,
                    "p50": 236.110379,
                    "p95": 236.110379,
                    "p99": 236.110379,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 105.090541,
                    "min": 105.090541,
                    "p50": 105.090541,
                    "p95": 105.090541,
                    "p99": 105.090541,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 115.333739,
                    "min": 115.333739,
                    "p50": 115.333739,
                    "p95": 115.333739,
                    "p99": 115.333739,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 164.731021,
                    "min": 164.731021,
                    "p50": 164.731021,
                    "p95": 164.731021,
                    "p99": 164.731021,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 540.831912,
                    "min": 540.831912,
                    "p50": 540.831912,
                    "p95": 540.831912,
                    "p99": 540.831912,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 356.944377,
                    "min": 356.944377,
                    "p50": 356.944377,
                    "p95": 356.944377,
                    "p99": 356.944377,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 427.66376399999996,
                    "min": 427.66376399999996,
                    "p50": 427.66376399999996,
                    "p95": 427.66376399999996,
                    "p99": 427.66376399999996,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 487.51045799999997,
                    "min": 487.51045799999997,
                    "p50": 487.51045799999997,
                    "p95": 487.51045799999997,
                    "p99": 487.51045799999997,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 269.527201,
                    "min": 269.527201,
                    "p50": 269.527201,
                    "p95": 269.527201,
                    "p99": 269.527201,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 182.953691,
                    "min": 182.953691,
                    "p50": 182.953691,
                    "p95": 182.953691,
                    "p99": 182.953691,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 239.816027,
                    "min": 239.816027,
                    "p50": 239.816027,
                    "p95": 239.816027,
                    "p99": 239.816027,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 214.570622,
                    "min": 214.570622,
                    "p50": 214.570622,
                    "p95": 214.570622,
                    "p99": 214.570622,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 291.234834,
                    "min": 291.234834,
                    "p50": 291.234834,
                    "p95": 291.234834,
                    "p99": 291.234834,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 303.73977099999996,
                    "min": 303.73977099999996,
                    "p50": 303.73977099999996,
                    "p95": 303.73977099999996,
                    "p99": 303.73977099999996,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 386.26665199999997,
                    "min": 386.26665199999997,
                    "p50": 386.26665199999997,
                    "p95": 386.26665199999997,
                    "p99": 386.26665199999997,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 300.936378,
                    "min": 300.936378,
                    "p50": 300.936378,
                    "p95": 300.936378,
                    "p99": 300.936378,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 314.615001,
                    "min": 314.615001,
                    "p50": 314.615001,
                    "p95": 314.615001,
                    "p99": 314.615001,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 367.202585,
                    "min": 367.202585,
                    "p50": 367.202585,
                    "p95": 367.202585,
                    "p99": 367.202585,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 363.982484,
                    "min": 363.982484,
                    "p50": 363.982484,
                    "p95": 363.982484,
                    "p99": 363.982484,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 134.21181099999998,
                    "min": 134.21181099999998,
                    "p50": 134.21181099999998,
                    "p95": 134.21181099999998,
                    "p99": 134.21181099999998,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 147.500136,
                    "min": 147.500136,
                    "p50": 147.500136,
                    "p95": 147.500136,
                    "p99": 147.500136,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 211.861046,
                    "min": 211.861046,
                    "p50": 211.861046,
                    "p95": 211.861046,
                    "p99": 211.861046,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 189.597938,
                    "min": 189.597938,
                    "p50": 189.597938,
                    "p95": 189.597938,
                    "p99": 189.597938,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 288.834819,
                    "min": 288.834819,
                    "p50": 288.834819,
                    "p95": 288.834819,
                    "p99": 288.834819,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 114.393586,
                    "min": 114.393586,
                    "p50": 114.393586,
                    "p95": 114.393586,
                    "p99": 114.393586,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 201.977588,
                    "min": 201.977588,
                    "p50": 201.977588,
                    "p95": 201.977588,
                    "p99": 201.977588,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 476.628838,
                    "min": 476.628838,
                    "p50": 476.628838,
                    "p95": 476.628838,
                    "p99": 476.628838,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 548.3356269999999,
                    "min": 548.3356269999999,
                    "p50": 548.3356269999999,
                    "p95": 548.3356269999999,
                    "p99": 548.3356269999999,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 409.25506099999996,
                    "min": 409.25506099999996,
                    "p50": 409.25506099999996,
                    "p95": 409.25506099999996,
                    "p99": 409.25506099999996,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 261.385964,
                    "min": 261.385964,
                    "p50": 261.385964,
                    "p95": 261.385964,
                    "p99": 261.385964,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 328.33829399999996,
                    "min": 328.33829399999996,
                    "p50": 328.33829399999996,
                    "p95": 328.33829399999996,
                    "p99": 328.33829399999996,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 365.85090299999996,
                    "min": 365.85090299999996,
                    "p50": 365.85090299999996,
                    "p95": 365.85090299999996,
                    "p99": 365.85090299999996,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 341.05488399999996,
                    "min": 341.05488399999996,
                    "p50": 341.05488399999996,
                    "p95": 341.05488399999996,
                    "p99": 341.05488399999996,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 379.33048199999996,
                    "min": 379.33048199999996,
                    "p50": 379.33048199999996,
                    "p95": 379.33048199999996,
                    "p99": 379.33048199999996,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 434.107666,
                    "min": 434.107666,
                    "p50": 434.107666,
                    "p95": 434.107666,
                    "p99": 434.107666,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 322.16745399999996,
                    "min": 322.16745399999996,
                    "p50": 322.16745399999996,
                    "p95": 322.16745399999996,
                    "p99": 322.16745399999996,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 293.19318999999996,
                    "min": 293.19318999999996,
                    "p50": 293.19318999999996,
                    "p95": 293.19318999999996,
                    "p99": 293.19318999999996,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 110.712626,
                    "min": 110.712626,
                    "p50": 110.712626,
                    "p95": 110.712626,
                    "p99": 110.712626,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 506.75234,
                    "min": 506.75234,
                    "p50": 506.75234,
                    "p95": 506.75234,
                    "p99": 506.75234,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 276.00958299999996,
                    "min": 276.00958299999996,
                    "p50": 276.00958299999996,
                    "p95": 276.00958299999996,
                    "p99": 276.00958299999996,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 249.812223,
                    "min": 249.812223,
                    "p50": 249.812223,
                    "p95": 249.812223,
                    "p99": 249.812223,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 184.846148,
                    "min": 184.846148,
                    "p50": 184.846148,
                    "p95": 184.846148,
                    "p99": 184.846148,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 191.811478,
                    "min": 191.811478,
                    "p50": 191.811478,
                    "p95": 191.811478,
                    "p99": 191.811478,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 203.961404,
                    "min": 203.961404,
                    "p50": 203.961404,
                    "p95": 203.961404,
                    "p99": 203.961404,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 129.303316,
                    "min": 129.303316,
                    "p50": 129.303316,
                    "p95": 129.303316,
                    "p99": 129.303316,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 157.773943,
                    "min": 157.773943,
                    "p50": 157.773943,
                    "p95": 157.773943,
                    "p99": 157.773943,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 350.456906,
                    "min": 350.456906,
                    "p50": 350.456906,
                    "p95": 350.456906,
                    "p99": 350.456906,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 419.72897,
                    "min": 419.72897,
                    "p50": 419.72897,
                    "p95": 419.72897,
                    "p99": 419.72897,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 338.855545,
                    "min": 338.855545,
                    "p50": 338.855545,
                    "p95": 338.855545,
                    "p99": 338.855545,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 445.044805,
                    "min": 445.044805,
                    "p50": 445.044805,
                    "p95": 445.044805,
                    "p99": 445.044805,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 136.306333,
                    "min": 136.306333,
                    "p50": 136.306333,
                    "p95": 136.306333,
                    "p99": 136.306333,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 308.643585,
                    "min": 308.643585,
                    "p50": 308.643585,
                    "p95": 308.643585,
                    "p99": 308.643585,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 544.019405,
                    "min": 544.019405,
                    "p50": 544.019405,
                    "p95": 544.019405,
                    "p99": 544.019405,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 188.987425,
                    "min": 188.987425,
                    "p50": 188.987425,
                    "p95": 188.987425,
                    "p99": 188.987425,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 238.513564,
                    "min": 238.513564,
                    "p50": 238.513564,
                    "p95": 238.513564,
                    "p99": 238.513564,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 214.6146,
                    "min": 214.6146,
                    "p50": 214.6146,
                    "p95": 214.6146,
                    "p99": 214.6146,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 165.087913,
                    "min": 165.087913,
                    "p50": 165.087913,
                    "p95": 165.087913,
                    "p99": 165.087913,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 268.981946,
                    "min": 268.981946,
                    "p50": 268.981946,
                    "p95": 268.981946,
                    "p99": 268.981946,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 283.998763,
                    "min": 283.998763,
                    "p50": 283.998763,
                    "p95": 283.998763,
                    "p99": 283.998763,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 80.021581,
                    "min": 80.021581,
                    "p50": 80.021581,
                    "p95": 80.021581,
                    "p99": 80.021581,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 356.374334,
                    "min": 356.374334,
                    "p50": 356.374334,
                    "p95": 356.374334,
                    "p99": 356.374334,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 550.6496129999999,
                    "min": 550.6496129999999,
                    "p50": 550.6496129999999,
                    "p95": 550.6496129999999,
                    "p99": 550.6496129999999,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 370.243423,
                    "min": 370.243423,
                    "p50": 370.243423,
                    "p95": 370.243423,
                    "p99": 370.243423,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 443.94980699999996,
                    "min": 443.94980699999996,
                    "p50": 443.94980699999996,
                    "p95": 443.94980699999996,
                    "p99": 443.94980699999996,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 294.247502,
                    "min": 294.247502,
                    "p50": 294.247502,
                    "p95": 294.247502,
                    "p99": 294.247502,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 222.724797,
                    "min": 222.724797,
                    "p50": 222.724797,
                    "p95": 222.724797,
                    "p99": 222.724797,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 411.47353999999996,
                    "min": 411.47353999999996,
                    "p50": 411.47353999999996,
                    "p95": 411.47353999999996,
                    "p99": 411.47353999999996,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 139.684881,
                    "min": 139.684881,
                    "p50": 139.684881,
                    "p95": 139.684881,
                    "p99": 139.684881,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 188.169557,
                    "min": 188.169557,
                    "p50": 188.169557,
                    "p95": 188.169557,
                    "p99": 188.169557,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 296.996517,
                    "min": 296.996517,
                    "p50": 296.996517,
                    "p95": 296.996517,
                    "p99": 296.996517,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 223.614994,
                    "min": 223.614994,
                    "p50": 223.614994,
                    "p95": 223.614994,
                    "p99": 223.614994,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 782.299906,
                    "min": 782.299906,
                    "p50": 782.299906,
                    "p95": 782.299906,
                    "p99": 782.299906,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 482.242214,
                    "min": 482.242214,
                    "p50": 482.242214,
                    "p95": 482.242214,
                    "p99": 482.242214,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 684.4963849999999,
                    "min": 684.4963849999999,
                    "p50": 684.4963849999999,
                    "p95": 684.4963849999999,
                    "p99": 684.4963849999999,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 555.796552,
                    "min": 555.796552,
                    "p50": 555.796552,
                    "p95": 555.796552,
                    "p99": 555.796552,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 518.80737,
                    "min": 518.80737,
                    "p50": 518.80737,
                    "p95": 518.80737,
                    "p99": 518.80737,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 1146.73504,
                    "min": 1146.73504,
                    "p50": 1146.73504,
                    "p95": 1146.73504,
                    "p99": 1146.73504,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 252.27477599999997,
                    "min": 252.27477599999997,
                    "p50": 252.27477599999997,
                    "p95": 252.27477599999997,
                    "p99": 252.27477599999997,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 190.98281,
                    "min": 190.98281,
                    "p50": 190.98281,
                    "p95": 190.98281,
                    "p99": 190.98281,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 224.33038399999998,
                    "min": 224.33038399999998,
                    "p50": 224.33038399999998,
                    "p95": 224.33038399999998,
                    "p99": 224.33038399999998,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 305.382636,
                    "min": 305.382636,
                    "p50": 305.382636,
                    "p95": 305.382636,
                    "p99": 305.382636,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 270.295971,
                    "min": 270.295971,
                    "p50": 270.295971,
                    "p95": 270.295971,
                    "p99": 270.295971,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 202.225651,
                    "min": 202.225651,
                    "p50": 202.225651,
                    "p95": 202.225651,
                    "p99": 202.225651,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 84.39541,
                    "min": 84.39541,
                    "p50": 84.39541,
                    "p95": 84.39541,
                    "p99": 84.39541,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 85.690984,
                    "min": 85.690984,
                    "p50": 85.690984,
                    "p95": 85.690984,
                    "p99": 85.690984,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 141.106461,
                    "min": 141.106461,
                    "p50": 141.106461,
                    "p95": 141.106461,
                    "p99": 141.106461,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 107.471167,
                    "min": 107.471167,
                    "p50": 107.471167,
                    "p95": 107.471167,
                    "p99": 107.471167,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 158.486264,
                    "min": 158.486264,
                    "p50": 158.486264,
                    "p95": 158.486264,
                    "p99": 158.486264,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 107.880555,
                    "min": 107.880555,
                    "p50": 107.880555,
                    "p95": 107.880555,
                    "p99": 107.880555,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 238.25846099999998,
                    "min": 238.25846099999998,
                    "p50": 238.25846099999998,
                    "p95": 238.25846099999998,
                    "p99": 238.25846099999998,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 152.08252,
                    "min": 152.08252,
                    "p50": 152.08252,
                    "p95": 152.08252,
                    "p99": 152.08252,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 140.375642,
                    "min": 140.375642,
                    "p50": 140.375642,
                    "p95": 140.375642,
                    "p99": 140.375642,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 168.595995,
                    "min": 168.595995,
                    "p50": 168.595995,
                    "p95": 168.595995,
                    "p99": 168.595995,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 87.079467,
                    "min": 87.079467,
                    "p50": 87.079467,
                    "p95": 87.079467,
                    "p99": 87.079467,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 123.742588,
                    "min": 123.742588,
                    "p50": 123.742588,
                    "p95": 123.742588,
                    "p99": 123.742588,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 122.928862,
                    "min": 122.928862,
                    "p50": 122.928862,
                    "p95": 122.928862,
                    "p99": 122.928862,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 103.546634,
                    "min": 103.546634,
                    "p50": 103.546634,
                    "p95": 103.546634,
                    "p99": 103.546634,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 230.75491699999998,
                    "min": 230.75491699999998,
                    "p50": 230.75491699999998,
                    "p95": 230.75491699999998,
                    "p99": 230.75491699999998,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 198.530173,
                    "min": 198.530173,
                    "p50": 198.530173,
                    "p95": 198.530173,
                    "p99": 198.530173,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 296.59335799999997,
                    "min": 296.59335799999997,
                    "p50": 296.59335799999997,
                    "p95": 296.59335799999997,
                    "p99": 296.59335799999997,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 420.086033,
                    "min": 420.086033,
                    "p50": 420.086033,
                    "p95": 420.086033,
                    "p99": 420.086033,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 155.101566,
                    "min": 155.101566,
                    "p50": 155.101566,
                    "p95": 155.101566,
                    "p99": 155.101566,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 100.365321,
                    "min": 100.365321,
                    "p50": 100.365321,
                    "p95": 100.365321,
                    "p99": 100.365321,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 141.822062,
                    "min": 141.822062,
                    "p50": 141.822062,
                    "p95": 141.822062,
                    "p99": 141.822062,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 75.811416,
                    "min": 75.811416,
                    "p50": 75.811416,
                    "p95": 75.811416,
                    "p99": 75.811416,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 216.717173,
                    "min": 216.717173,
                    "p50": 216.717173,
                    "p95": 216.717173,
                    "p99": 216.717173,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 262.027678,
                    "min": 262.027678,
                    "p50": 262.027678,
                    "p95": 262.027678,
                    "p99": 262.027678,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 154.295928,
                    "min": 154.295928,
                    "p50": 154.295928,
                    "p95": 154.295928,
                    "p99": 154.295928,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 804.2638049999999,
                    "min": 804.2638049999999,
                    "p50": 804.2638049999999,
                    "p95": 804.2638049999999,
                    "p99": 804.2638049999999,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 217.19838,
                    "min": 217.19838,
                    "p50": 217.19838,
                    "p95": 217.19838,
                    "p99": 217.19838,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 154.319919,
                    "min": 154.319919,
                    "p50": 154.319919,
                    "p95": 154.319919,
                    "p99": 154.319919,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 270.850915,
                    "min": 270.850915,
                    "p50": 270.850915,
                    "p95": 270.850915,
                    "p99": 270.850915,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 115.522615,
                    "min": 115.522615,
                    "p50": 115.522615,
                    "p95": 115.522615,
                    "p99": 115.522615,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 427.537489,
                    "min": 427.537489,
                    "p50": 427.537489,
                    "p95": 427.537489,
                    "p99": 427.537489,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 328.05621299999996,
                    "min": 328.05621299999996,
                    "p50": 328.05621299999996,
                    "p95": 328.05621299999996,
                    "p99": 328.05621299999996,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 301.350107,
                    "min": 301.350107,
                    "p50": 301.350107,
                    "p95": 301.350107,
                    "p99": 301.350107,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 58.390674999999995,
                    "min": 58.390674999999995,
                    "p50": 58.390674999999995,
                    "p95": 58.390674999999995,
                    "p99": 58.390674999999995,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 133.797942,
                    "min": 133.797942,
                    "p50": 133.797942,
                    "p95": 133.797942,
                    "p99": 133.797942,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 376.068174,
                    "min": 376.068174,
                    "p50": 376.068174,
                    "p95": 376.068174,
                    "p99": 376.068174,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 192.173798,
                    "min": 192.173798,
                    "p50": 192.173798,
                    "p95": 192.173798,
                    "p99": 192.173798,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 248.97609699999998,
                    "min": 248.97609699999998,
                    "p50": 248.97609699999998,
                    "p95": 248.97609699999998,
                    "p99": 248.97609699999998,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 169.47228199999998,
                    "min": 169.47228199999998,
                    "p50": 169.47228199999998,
                    "p95": 169.47228199999998,
                    "p99": 169.47228199999998,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 287.713802,
                    "min": 287.713802,
                    "p50": 287.713802,
                    "p95": 287.713802,
                    "p99": 287.713802,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 612.275371,
                    "min": 612.275371,
                    "p50": 612.275371,
                    "p95": 612.275371,
                    "p99": 612.275371,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 978.320381,
                    "min": 978.320381,
                    "p50": 978.320381,
                    "p95": 978.320381,
                    "p99": 978.320381,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 232.79445099999998,
                    "min": 232.79445099999998,
                    "p50": 232.79445099999998,
                    "p95": 232.79445099999998,
                    "p99": 232.79445099999998,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 77.39550299999999,
                    "min": 77.39550299999999,
                    "p50": 77.39550299999999,
                    "p95": 77.39550299999999,
                    "p99": 77.39550299999999,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 220.02843199999998,
                    "min": 220.02843199999998,
                    "p50": 220.02843199999998,
                    "p95": 220.02843199999998,
                    "p99": 220.02843199999998,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 355.60490599999997,
                    "min": 355.60490599999997,
                    "p50": 355.60490599999997,
                    "p95": 355.60490599999997,
                    "p99": 355.60490599999997,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 548.4297369999999,
                    "min": 548.4297369999999,
                    "p50": 548.4297369999999,
                    "p95": 548.4297369999999,
                    "p99": 548.4297369999999,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 478.77816099999995,
                    "min": 478.77816099999995,
                    "p50": 478.77816099999995,
                    "p95": 478.77816099999995,
                    "p99": 478.77816099999995,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 126.805515,
                    "min": 126.805515,
                    "p50": 126.805515,
                    "p95": 126.805515,
                    "p99": 126.805515,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 226.91983399999998,
                    "min": 226.91983399999998,
                    "p50": 226.91983399999998,
                    "p95": 226.91983399999998,
                    "p99": 226.91983399999998,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 105.50197999999999,
                    "min": 105.50197999999999,
                    "p50": 105.50197999999999,
                    "p95": 105.50197999999999,
                    "p99": 105.50197999999999,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 196.47116,
                    "min": 196.47116,
                    "p50": 196.47116,
                    "p95": 196.47116,
                    "p99": 196.47116,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 290.745379,
                    "min": 290.745379,
                    "p50": 290.745379,
                    "p95": 290.745379,
                    "p99": 290.745379,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 83.852445,
                    "min": 83.852445,
                    "p50": 83.852445,
                    "p95": 83.852445,
                    "p99": 83.852445,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 156.499728,
                    "min": 156.499728,
                    "p50": 156.499728,
                    "p95": 156.499728,
                    "p99": 156.499728,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 162.439576,
                    "min": 162.439576,
                    "p50": 162.439576,
                    "p95": 162.439576,
                    "p99": 162.439576,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 56.533505999999996,
                    "min": 56.533505999999996,
                    "p50": 56.533505999999996,
                    "p95": 56.533505999999996,
                    "p99": 56.533505999999996,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 51.178022999999996,
                    "min": 51.178022999999996,
                    "p50": 51.178022999999996,
                    "p95": 51.178022999999996,
                    "p99": 51.178022999999996,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 146.119754,
                    "min": 146.119754,
                    "p50": 146.119754,
                    "p95": 146.119754,
                    "p99": 146.119754,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 142.52325199999999,
                    "min": 142.52325199999999,
                    "p50": 142.52325199999999,
                    "p95": 142.52325199999999,
                    "p99": 142.52325199999999,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 176.274995,
                    "min": 176.274995,
                    "p50": 176.274995,
                    "p95": 176.274995,
                    "p99": 176.274995,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 182.46694499999998,
                    "min": 182.46694499999998,
                    "p50": 182.46694499999998,
                    "p95": 182.46694499999998,
                    "p99": 182.46694499999998,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 311.52144799999996,
                    "min": 311.52144799999996,
                    "p50": 311.52144799999996,
                    "p95": 311.52144799999996,
                    "p99": 311.52144799999996,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 276.659066,
                    "min": 276.659066,
                    "p50": 276.659066,
                    "p95": 276.659066,
                    "p99": 276.659066,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 98.58757999999999,
                    "min": 98.58757999999999,
                    "p50": 98.58757999999999,
                    "p95": 98.58757999999999,
                    "p99": 98.58757999999999,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 433.790728,
                    "min": 433.790728,
                    "p50": 433.790728,
                    "p95": 433.790728,
                    "p99": 433.790728,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 197.55568,
                    "min": 197.55568,
                    "p50": 197.55568,
                    "p95": 197.55568,
                    "p99": 197.55568,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 137.842851,
                    "min": 137.842851,
                    "p50": 137.842851,
                    "p95": 137.842851,
                    "p99": 137.842851,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 258.644981,
                    "min": 258.644981,
                    "p50": 258.644981,
                    "p95": 258.644981,
                    "p99": 258.644981,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 147.026939,
                    "min": 147.026939,
                    "p50": 147.026939,
                    "p95": 147.026939,
                    "p99": 147.026939,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 386.227175,
                    "min": 386.227175,
                    "p50": 386.227175,
                    "p95": 386.227175,
                    "p99": 386.227175,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 117.71975499999999,
                    "min": 117.71975499999999,
                    "p50": 117.71975499999999,
                    "p95": 117.71975499999999,
                    "p99": 117.71975499999999,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 336.404335,
                    "min": 336.404335,
                    "p50": 336.404335,
                    "p95": 336.404335,
                    "p99": 336.404335,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 178.783146,
                    "min": 178.783146,
                    "p50": 178.783146,
                    "p95": 178.783146,
                    "p99": 178.783146,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 295.874888,
                    "min": 295.874888,
                    "p50": 295.874888,
                    "p95": 295.874888,
                    "p99": 295.874888,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 238.781187,
                    "min": 238.781187,
                    "p50": 238.781187,
                    "p95": 238.781187,
                    "p99": 238.781187,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 125.441442,
                    "min": 125.441442,
                    "p50": 125.441442,
                    "p95": 125.441442,
                    "p99": 125.441442,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 298.3348,
                    "min": 298.3348,
                    "p50": 298.3348,
                    "p95": 298.3348,
                    "p99": 298.3348,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 193.949559,
                    "min": 193.949559,
                    "p50": 193.949559,
                    "p95": 193.949559,
                    "p99": 193.949559,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 261.876063,
                    "min": 261.876063,
                    "p50": 261.876063,
                    "p95": 261.876063,
                    "p99": 261.876063,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 371.70820499999996,
                    "min": 371.70820499999996,
                    "p50": 371.70820499999996,
                    "p95": 371.70820499999996,
                    "p99": 371.70820499999996,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 228.04992199999998,
                    "min": 228.04992199999998,
                    "p50": 228.04992199999998,
                    "p95": 228.04992199999998,
                    "p99": 228.04992199999998,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 282.71056,
                    "min": 282.71056,
                    "p50": 282.71056,
                    "p95": 282.71056,
                    "p99": 282.71056,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 515.2949679999999,
                    "min": 515.2949679999999,
                    "p50": 515.2949679999999,
                    "p95": 515.2949679999999,
                    "p99": 515.2949679999999,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 166.425816,
                    "min": 166.425816,
                    "p50": 166.425816,
                    "p95": 166.425816,
                    "p99": 166.425816,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 52.348780999999995,
                    "min": 52.348780999999995,
                    "p50": 52.348780999999995,
                    "p95": 52.348780999999995,
                    "p99": 52.348780999999995,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 172.42063199999998,
                    "min": 172.42063199999998,
                    "p50": 172.42063199999998,
                    "p95": 172.42063199999998,
                    "p99": 172.42063199999998,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 141.861422,
                    "min": 141.861422,
                    "p50": 141.861422,
                    "p95": 141.861422,
                    "p99": 141.861422,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 95.083457,
                    "min": 95.083457,
                    "p50": 95.083457,
                    "p95": 95.083457,
                    "p99": 95.083457,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 139.826018,
                    "min": 139.826018,
                    "p50": 139.826018,
                    "p95": 139.826018,
                    "p99": 139.826018,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 340.338266,
                    "min": 340.338266,
                    "p50": 340.338266,
                    "p95": 340.338266,
                    "p99": 340.338266,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 238.589393,
                    "min": 238.589393,
                    "p50": 238.589393,
                    "p95": 238.589393,
                    "p99": 238.589393,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 165.87935099999999,
                    "min": 165.87935099999999,
                    "p50": 165.87935099999999,
                    "p95": 165.87935099999999,
                    "p99": 165.87935099999999,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 236.55847799999998,
                    "min": 236.55847799999998,
                    "p50": 236.55847799999998,
                    "p95": 236.55847799999998,
                    "p99": 236.55847799999998,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 208.96875799999998,
                    "min": 208.96875799999998,
                    "p50": 208.96875799999998,
                    "p95": 208.96875799999998,
                    "p99": 208.96875799999998,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 164.515009,
                    "min": 164.515009,
                    "p50": 164.515009,
                    "p95": 164.515009,
                    "p99": 164.515009,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 122.63907999999999,
                    "min": 122.63907999999999,
                    "p50": 122.63907999999999,
                    "p95": 122.63907999999999,
                    "p99": 122.63907999999999,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 149.95319899999998,
                    "min": 149.95319899999998,
                    "p50": 149.95319899999998,
                    "p95": 149.95319899999998,
                    "p99": 149.95319899999998,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 97.41229299999999,
                    "min": 97.41229299999999,
                    "p50": 97.41229299999999,
                    "p95": 97.41229299999999,
                    "p99": 97.41229299999999,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 108.236785,
                    "min": 108.236785,
                    "p50": 108.236785,
                    "p95": 108.236785,
                    "p99": 108.236785,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 181.444523,
                    "min": 181.444523,
                    "p50": 181.444523,
                    "p95": 181.444523,
                    "p99": 181.444523,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 135.685992,
                    "min": 135.685992,
                    "p50": 135.685992,
                    "p95": 135.685992,
                    "p99": 135.685992,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 317.233822,
                    "min": 317.233822,
                    "p50": 317.233822,
                    "p95": 317.233822,
                    "p99": 317.233822,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 189.123552,
                    "min": 189.123552,
                    "p50": 189.123552,
                    "p95": 189.123552,
                    "p99": 189.123552,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 281.700308,
                    "min": 281.700308,
                    "p50": 281.700308,
                    "p95": 281.700308,
                    "p99": 281.700308,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 72.482208,
                    "min": 72.482208,
                    "p50": 72.482208,
                    "p95": 72.482208,
                    "p99": 72.482208,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 220.799362,
                    "min": 220.799362,
                    "p50": 220.799362,
                    "p95": 220.799362,
                    "p99": 220.799362,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 169.41554399999998,
                    "min": 169.41554399999998,
                    "p50": 169.41554399999998,
                    "p95": 169.41554399999998,
                    "p99": 169.41554399999998,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 104.101749,
                    "min": 104.101749,
                    "p50": 104.101749,
                    "p95": 104.101749,
                    "p99": 104.101749,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 81.426583,
                    "min": 81.426583,
                    "p50": 81.426583,
                    "p95": 81.426583,
                    "p99": 81.426583,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 63.779098,
                    "min": 63.779098,
                    "p50": 63.779098,
                    "p95": 63.779098,
                    "p99": 63.779098,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 181.95762,
                    "min": 181.95762,
                    "p50": 181.95762,
                    "p95": 181.95762,
                    "p99": 181.95762,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 203.689982,
                    "min": 203.689982,
                    "p50": 203.689982,
                    "p95": 203.689982,
                    "p99": 203.689982,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 132.18689799999999,
                    "min": 132.18689799999999,
                    "p50": 132.18689799999999,
                    "p95": 132.18689799999999,
                    "p99": 132.18689799999999,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 249.937661,
                    "min": 249.937661,
                    "p50": 249.937661,
                    "p95": 249.937661,
                    "p99": 249.937661,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 139.67099199999998,
                    "min": 139.67099199999998,
                    "p50": 139.67099199999998,
                    "p95": 139.67099199999998,
                    "p99": 139.67099199999998,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 86.389096,
                    "min": 86.389096,
                    "p50": 86.389096,
                    "p95": 86.389096,
                    "p99": 86.389096,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 192.16415899999998,
                    "min": 192.16415899999998,
                    "p50": 192.16415899999998,
                    "p95": 192.16415899999998,
                    "p99": 192.16415899999998,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 180.209217,
                    "min": 180.209217,
                    "p50": 180.209217,
                    "p95": 180.209217,
                    "p99": 180.209217,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 92.67988299999999,
                    "min": 92.67988299999999,
                    "p50": 92.67988299999999,
                    "p95": 92.67988299999999,
                    "p99": 92.67988299999999,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 124.744112,
                    "min": 124.744112,
                    "p50": 124.744112,
                    "p95": 124.744112,
                    "p99": 124.744112,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 364.54862099999997,
                    "min": 364.54862099999997,
                    "p50": 364.54862099999997,
                    "p95": 364.54862099999997,
                    "p99": 364.54862099999997,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 156.748292,
                    "min": 156.748292,
                    "p50": 156.748292,
                    "p95": 156.748292,
                    "p99": 156.748292,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 471.94847,
                    "min": 471.94847,
                    "p50": 471.94847,
                    "p95": 471.94847,
                    "p99": 471.94847,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 410.653995,
                    "min": 410.653995,
                    "p50": 410.653995,
                    "p95": 410.653995,
                    "p99": 410.653995,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 226.27984099999998,
                    "min": 226.27984099999998,
                    "p50": 226.27984099999998,
                    "p95": 226.27984099999998,
                    "p99": 226.27984099999998,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 780.954179,
                    "min": 780.954179,
                    "p50": 780.954179,
                    "p95": 780.954179,
                    "p99": 780.954179,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 561.45003,
                    "min": 561.45003,
                    "p50": 561.45003,
                    "p95": 561.45003,
                    "p99": 561.45003,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 264.861051,
                    "min": 264.861051,
                    "p50": 264.861051,
                    "p95": 264.861051,
                    "p99": 264.861051,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 584.5878349999999,
                    "min": 584.5878349999999,
                    "p50": 584.5878349999999,
                    "p95": 584.5878349999999,
                    "p99": 584.5878349999999,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 301.870905,
                    "min": 301.870905,
                    "p50": 301.870905,
                    "p95": 301.870905,
                    "p99": 301.870905,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 489.78594999999996,
                    "min": 489.78594999999996,
                    "p50": 489.78594999999996,
                    "p95": 489.78594999999996,
                    "p99": 489.78594999999996,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 371.32413499999996,
                    "min": 371.32413499999996,
                    "p50": 371.32413499999996,
                    "p95": 371.32413499999996,
                    "p99": 371.32413499999996,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 521.025951,
                    "min": 521.025951,
                    "p50": 521.025951,
                    "p95": 521.025951,
                    "p99": 521.025951,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 690.734379,
                    "min": 690.734379,
                    "p50": 690.734379,
                    "p95": 690.734379,
                    "p99": 690.734379,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 335.763213,
                    "min": 335.763213,
                    "p50": 335.763213,
                    "p95": 335.763213,
                    "p99": 335.763213,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 445.685212,
                    "min": 445.685212,
                    "p50": 445.685212,
                    "p95": 445.685212,
                    "p99": 445.685212,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 112.575126,
                    "min": 112.575126,
                    "p50": 112.575126,
                    "p95": 112.575126,
                    "p99": 112.575126,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 178.73666799999998,
                    "min": 178.73666799999998,
                    "p50": 178.73666799999998,
                    "p95": 178.73666799999998,
                    "p99": 178.73666799999998,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 183.38103099999998,
                    "min": 183.38103099999998,
                    "p50": 183.38103099999998,
                    "p95": 183.38103099999998,
                    "p99": 183.38103099999998,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 96.97221499999999,
                    "min": 96.97221499999999,
                    "p50": 96.97221499999999,
                    "p95": 96.97221499999999,
                    "p99": 96.97221499999999,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 214.78125799999998,
                    "min": 214.78125799999998,
                    "p50": 214.78125799999998,
                    "p95": 214.78125799999998,
                    "p99": 214.78125799999998,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 245.223832,
                    "min": 245.223832,
                    "p50": 245.223832,
                    "p95": 245.223832,
                    "p99": 245.223832,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 112.429491,
                    "min": 112.429491,
                    "p50": 112.429491,
                    "p95": 112.429491,
                    "p99": 112.429491,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 173.863302,
                    "min": 173.863302,
                    "p50": 173.863302,
                    "p95": 173.863302,
                    "p99": 173.863302,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 156.756422,
                    "min": 156.756422,
                    "p50": 156.756422,
                    "p95": 156.756422,
                    "p99": 156.756422,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 127.611503,
                    "min": 127.611503,
                    "p50": 127.611503,
                    "p95": 127.611503,
                    "p99": 127.611503,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 75.040679,
                    "min": 75.040679,
                    "p50": 75.040679,
                    "p95": 75.040679,
                    "p99": 75.040679,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 299.74616299999997,
                    "min": 299.74616299999997,
                    "p50": 299.74616299999997,
                    "p95": 299.74616299999997,
                    "p99": 299.74616299999997,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 202.428147,
                    "min": 202.428147,
                    "p50": 202.428147,
                    "p95": 202.428147,
                    "p99": 202.428147,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 231.908717,
                    "min": 231.908717,
                    "p50": 231.908717,
                    "p95": 231.908717,
                    "p99": 231.908717,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 336.441495,
                    "min": 336.441495,
                    "p50": 336.441495,
                    "p95": 336.441495,
                    "p99": 336.441495,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 261.680189,
                    "min": 261.680189,
                    "p50": 261.680189,
                    "p95": 261.680189,
                    "p99": 261.680189,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 140.393442,
                    "min": 140.393442,
                    "p50": 140.393442,
                    "p95": 140.393442,
                    "p99": 140.393442,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 284.266669,
                    "min": 284.266669,
                    "p50": 284.266669,
                    "p95": 284.266669,
                    "p99": 284.266669,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 179.464969,
                    "min": 179.464969,
                    "p50": 179.464969,
                    "p95": 179.464969,
                    "p99": 179.464969,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 234.91653499999998,
                    "min": 234.91653499999998,
                    "p50": 234.91653499999998,
                    "p95": 234.91653499999998,
                    "p99": 234.91653499999998,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 247.414912,
                    "min": 247.414912,
                    "p50": 247.414912,
                    "p95": 247.414912,
                    "p99": 247.414912,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 318.729271,
                    "min": 318.729271,
                    "p50": 318.729271,
                    "p95": 318.729271,
                    "p99": 318.729271,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 194.259152,
                    "min": 194.259152,
                    "p50": 194.259152,
                    "p95": 194.259152,
                    "p99": 194.259152,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 122.048867,
                    "min": 122.048867,
                    "p50": 122.048867,
                    "p95": 122.048867,
                    "p99": 122.048867,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 149.90388099999998,
                    "min": 149.90388099999998,
                    "p50": 149.90388099999998,
                    "p95": 149.90388099999998,
                    "p99": 149.90388099999998,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 219.81494899999998,
                    "min": 219.81494899999998,
                    "p50": 219.81494899999998,
                    "p95": 219.81494899999998,
                    "p99": 219.81494899999998,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 204.443252,
                    "min": 204.443252,
                    "p50": 204.443252,
                    "p95": 204.443252,
                    "p99": 204.443252,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 459.698289,
                    "min": 459.698289,
                    "p50": 459.698289,
                    "p95": 459.698289,
                    "p99": 459.698289,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 136.291544,
                    "min": 136.291544,
                    "p50": 136.291544,
                    "p95": 136.291544,
                    "p99": 136.291544,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 80.534227,
                    "min": 80.534227,
                    "p50": 80.534227,
                    "p95": 80.534227,
                    "p99": 80.534227,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 107.61394299999999,
                    "min": 107.61394299999999,
                    "p50": 107.61394299999999,
                    "p95": 107.61394299999999,
                    "p99": 107.61394299999999,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 164.910699,
                    "min": 164.910699,
                    "p50": 164.910699,
                    "p95": 164.910699,
                    "p99": 164.910699,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 94.010547,
                    "min": 94.010547,
                    "p50": 94.010547,
                    "p95": 94.010547,
                    "p99": 94.010547,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 669.780345,
                    "min": 669.780345,
                    "p50": 669.780345,
                    "p95": 669.780345,
                    "p99": 669.780345,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 323.805162,
                    "min": 323.805162,
                    "p50": 323.805162,
                    "p95": 323.805162,
                    "p99": 323.805162,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 165.32621799999998,
                    "min": 165.32621799999998,
                    "p50": 165.32621799999998,
                    "p95": 165.32621799999998,
                    "p99": 165.32621799999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 199.536927,
                    "min": 199.536927,
                    "p50": 199.536927,
                    "p95": 199.536927,
                    "p99": 199.536927,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 466.65849699999995,
                    "min": 466.65849699999995,
                    "p50": 466.65849699999995,
                    "p95": 466.65849699999995,
                    "p99": 466.65849699999995,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 253.10769499999998,
                    "min": 253.10769499999998,
                    "p50": 253.10769499999998,
                    "p95": 253.10769499999998,
                    "p99": 253.10769499999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 839.749116,
                    "min": 839.749116,
                    "p50": 839.749116,
                    "p95": 839.749116,
                    "p99": 839.749116,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 248.35002599999999,
                    "min": 248.35002599999999,
                    "p50": 248.35002599999999,
                    "p95": 248.35002599999999,
                    "p99": 248.35002599999999,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 504.76962999999995,
                    "min": 504.76962999999995,
                    "p50": 504.76962999999995,
                    "p95": 504.76962999999995,
                    "p99": 504.76962999999995,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 386.18375799999995,
                    "min": 386.18375799999995,
                    "p50": 386.18375799999995,
                    "p95": 386.18375799999995,
                    "p99": 386.18375799999995,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 543.094446,
                    "min": 543.094446,
                    "p50": 543.094446,
                    "p95": 543.094446,
                    "p99": 543.094446,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 584.872988,
                    "min": 584.872988,
                    "p50": 584.872988,
                    "p95": 584.872988,
                    "p99": 584.872988,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 771.330865,
                    "min": 771.330865,
                    "p50": 771.330865,
                    "p95": 771.330865,
                    "p99": 771.330865,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 621.454294,
                    "min": 621.454294,
                    "p50": 621.454294,
                    "p95": 621.454294,
                    "p99": 621.454294,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 416.84905499999996,
                    "min": 416.84905499999996,
                    "p50": 416.84905499999996,
                    "p95": 416.84905499999996,
                    "p99": 416.84905499999996,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 83.481405,
                    "min": 83.481405,
                    "p50": 83.481405,
                    "p95": 83.481405,
                    "p99": 83.481405,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 245.42557599999998,
                    "min": 245.42557599999998,
                    "p50": 245.42557599999998,
                    "p95": 245.42557599999998,
                    "p99": 245.42557599999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 189.851043,
                    "min": 189.851043,
                    "p50": 189.851043,
                    "p95": 189.851043,
                    "p99": 189.851043,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 163.42204999999998,
                    "min": 163.42204999999998,
                    "p50": 163.42204999999998,
                    "p95": 163.42204999999998,
                    "p99": 163.42204999999998,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 121.887531,
                    "min": 121.887531,
                    "p50": 121.887531,
                    "p95": 121.887531,
                    "p99": 121.887531,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 80.536446,
                    "min": 80.536446,
                    "p50": 80.536446,
                    "p95": 80.536446,
                    "p99": 80.536446,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 108.45498099999999,
                    "min": 108.45498099999999,
                    "p50": 108.45498099999999,
                    "p95": 108.45498099999999,
                    "p99": 108.45498099999999,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 231.208747,
                    "min": 231.208747,
                    "p50": 231.208747,
                    "p95": 231.208747,
                    "p99": 231.208747,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 279.287486,
                    "min": 279.287486,
                    "p50": 279.287486,
                    "p95": 279.287486,
                    "p99": 279.287486,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 134.546073,
                    "min": 134.546073,
                    "p50": 134.546073,
                    "p95": 134.546073,
                    "p99": 134.546073,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 176.467072,
                    "min": 176.467072,
                    "p50": 176.467072,
                    "p95": 176.467072,
                    "p99": 176.467072,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 314.50971799999996,
                    "min": 314.50971799999996,
                    "p50": 314.50971799999996,
                    "p95": 314.50971799999996,
                    "p99": 314.50971799999996,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 203.962986,
                    "min": 203.962986,
                    "p50": 203.962986,
                    "p95": 203.962986,
                    "p99": 203.962986,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 148.755052,
                    "min": 148.755052,
                    "p50": 148.755052,
                    "p95": 148.755052,
                    "p99": 148.755052,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 217.437186,
                    "min": 217.437186,
                    "p50": 217.437186,
                    "p95": 217.437186,
                    "p99": 217.437186,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 1066.970722,
                    "min": 1066.970722,
                    "p50": 1066.970722,
                    "p95": 1066.970722,
                    "p99": 1066.970722,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 588.6696539999999,
                    "min": 588.6696539999999,
                    "p50": 588.6696539999999,
                    "p95": 588.6696539999999,
                    "p99": 588.6696539999999,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 722.79376,
                    "min": 722.79376,
                    "p50": 722.79376,
                    "p95": 722.79376,
                    "p99": 722.79376,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 782.571467,
                    "min": 782.571467,
                    "p50": 782.571467,
                    "p95": 782.571467,
                    "p99": 782.571467,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 995.682961,
                    "min": 995.682961,
                    "p50": 995.682961,
                    "p95": 995.682961,
                    "p99": 995.682961,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 920.5823059999999,
                    "min": 920.5823059999999,
                    "p50": 920.5823059999999,
                    "p95": 920.5823059999999,
                    "p99": 920.5823059999999,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 318.371002,
                    "min": 318.371002,
                    "p50": 318.371002,
                    "p95": 318.371002,
                    "p99": 318.371002,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 647.997675,
                    "min": 647.997675,
                    "p50": 647.997675,
                    "p95": 647.997675,
                    "p99": 647.997675,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 859.0688759999999,
                    "min": 859.0688759999999,
                    "p50": 859.0688759999999,
                    "p95": 859.0688759999999,
                    "p99": 859.0688759999999,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 1240.215375,
                    "min": 1240.215375,
                    "p50": 1240.215375,
                    "p95": 1240.215375,
                    "p99": 1240.215375,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 380.70479,
                    "min": 380.70479,
                    "p50": 380.70479,
                    "p95": 380.70479,
                    "p99": 380.70479,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 521.459523,
                    "min": 521.459523,
                    "p50": 521.459523,
                    "p95": 521.459523,
                    "p99": 521.459523,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 246.495678,
                    "min": 246.495678,
                    "p50": 246.495678,
                    "p95": 246.495678,
                    "p99": 246.495678,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 442.59398999999996,
                    "min": 442.59398999999996,
                    "p50": 442.59398999999996,
                    "p95": 442.59398999999996,
                    "p99": 442.59398999999996,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 1389.1662119999999,
                    "min": 1389.1662119999999,
                    "p50": 1389.1662119999999,
                    "p95": 1389.1662119999999,
                    "p99": 1389.1662119999999,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 1365.349254,
                    "min": 1365.349254,
                    "p50": 1365.349254,
                    "p95": 1365.349254,
                    "p99": 1365.349254,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 962.0809939999999,
                    "min": 962.0809939999999,
                    "p50": 962.0809939999999,
                    "p95": 962.0809939999999,
                    "p99": 962.0809939999999,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 833.7882,
                    "min": 833.7882,
                    "p50": 833.7882,
                    "p95": 833.7882,
                    "p99": 833.7882,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 629.650799,
                    "min": 629.650799,
                    "p50": 629.650799,
                    "p95": 629.650799,
                    "p99": 629.650799,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 566.073076,
                    "min": 566.073076,
                    "p50": 566.073076,
                    "p95": 566.073076,
                    "p99": 566.073076,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 441.46705,
                    "min": 441.46705,
                    "p50": 441.46705,
                    "p95": 441.46705,
                    "p99": 441.46705,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 898.9391899999999,
                    "min": 898.9391899999999,
                    "p50": 898.9391899999999,
                    "p95": 898.9391899999999,
                    "p99": 898.9391899999999,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 303.520631,
                    "min": 303.520631,
                    "p50": 303.520631,
                    "p95": 303.520631,
                    "p99": 303.520631,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 769.76725,
                    "min": 769.76725,
                    "p50": 769.76725,
                    "p95": 769.76725,
                    "p99": 769.76725,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 368.939684,
                    "min": 368.939684,
                    "p50": 368.939684,
                    "p95": 368.939684,
                    "p99": 368.939684,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 1196.511014,
                    "min": 1196.511014,
                    "p50": 1196.511014,
                    "p95": 1196.511014,
                    "p99": 1196.511014,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 239.247976,
                    "min": 239.247976,
                    "p50": 239.247976,
                    "p95": 239.247976,
                    "p99": 239.247976,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 503.01257,
                    "min": 503.01257,
                    "p50": 503.01257,
                    "p95": 503.01257,
                    "p99": 503.01257,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 1035.3254239999999,
                    "min": 1035.3254239999999,
                    "p50": 1035.3254239999999,
                    "p95": 1035.3254239999999,
                    "p99": 1035.3254239999999,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 694.8229,
                    "min": 694.8229,
                    "p50": 694.8229,
                    "p95": 694.8229,
                    "p99": 694.8229,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 770.911657,
                    "min": 770.911657,
                    "p50": 770.911657,
                    "p95": 770.911657,
                    "p99": 770.911657,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 438.91339,
                    "min": 438.91339,
                    "p50": 438.91339,
                    "p95": 438.91339,
                    "p99": 438.91339,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 374.688014,
                    "min": 374.688014,
                    "p50": 374.688014,
                    "p95": 374.688014,
                    "p99": 374.688014,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 698.798179,
                    "min": 698.798179,
                    "p50": 698.798179,
                    "p95": 698.798179,
                    "p99": 698.798179,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 1356.942276,
                    "min": 1356.942276,
                    "p50": 1356.942276,
                    "p95": 1356.942276,
                    "p99": 1356.942276,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 301.725059,
                    "min": 301.725059,
                    "p50": 301.725059,
                    "p95": 301.725059,
                    "p99": 301.725059,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 504.99666399999995,
                    "min": 504.99666399999995,
                    "p50": 504.99666399999995,
                    "p95": 504.99666399999995,
                    "p99": 504.99666399999995,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 239.39285199999998,
                    "min": 239.39285199999998,
                    "p50": 239.39285199999998,
                    "p95": 239.39285199999998,
                    "p99": 239.39285199999998,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 1027.588865,
                    "min": 1027.588865,
                    "p50": 1027.588865,
                    "p95": 1027.588865,
                    "p99": 1027.588865,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 971.277033,
                    "min": 971.277033,
                    "p50": 971.277033,
                    "p95": 971.277033,
                    "p99": 971.277033,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 827.128113,
                    "min": 827.128113,
                    "p50": 827.128113,
                    "p95": 827.128113,
                    "p99": 827.128113,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 898.688598,
                    "min": 898.688598,
                    "p50": 898.688598,
                    "p95": 898.688598,
                    "p99": 898.688598,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 641.512884,
                    "min": 641.512884,
                    "p50": 641.512884,
                    "p95": 641.512884,
                    "p99": 641.512884,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 1210.946819,
                    "min": 1210.946819,
                    "p50": 1210.946819,
                    "p95": 1210.946819,
                    "p99": 1210.946819,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 568.1297,
                    "min": 568.1297,
                    "p50": 568.1297,
                    "p95": 568.1297,
                    "p99": 568.1297,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 324.09628599999996,
                    "min": 324.09628599999996,
                    "p50": 324.09628599999996,
                    "p95": 324.09628599999996,
                    "p99": 324.09628599999996,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 192.789473,
                    "min": 192.789473,
                    "p50": 192.789473,
                    "p95": 192.789473,
                    "p99": 192.789473,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 369.256845,
                    "min": 369.256845,
                    "p50": 369.256845,
                    "p95": 369.256845,
                    "p99": 369.256845,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 414.855601,
                    "min": 414.855601,
                    "p50": 414.855601,
                    "p95": 414.855601,
                    "p99": 414.855601,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 106.14269399999999,
                    "min": 106.14269399999999,
                    "p50": 106.14269399999999,
                    "p95": 106.14269399999999,
                    "p99": 106.14269399999999,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 301.02090899999996,
                    "min": 301.02090899999996,
                    "p50": 301.02090899999996,
                    "p95": 301.02090899999996,
                    "p99": 301.02090899999996,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 162.749428,
                    "min": 162.749428,
                    "p50": 162.749428,
                    "p95": 162.749428,
                    "p99": 162.749428,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 127.953605,
                    "min": 127.953605,
                    "p50": 127.953605,
                    "p95": 127.953605,
                    "p99": 127.953605,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 707.085153,
                    "min": 707.085153,
                    "p50": 707.085153,
                    "p95": 707.085153,
                    "p99": 707.085153,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 226.75495999999998,
                    "min": 226.75495999999998,
                    "p50": 226.75495999999998,
                    "p95": 226.75495999999998,
                    "p99": 226.75495999999998,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 280.471474,
                    "min": 280.471474,
                    "p50": 280.471474,
                    "p95": 280.471474,
                    "p99": 280.471474,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 343.991719,
                    "min": 343.991719,
                    "p50": 343.991719,
                    "p95": 343.991719,
                    "p99": 343.991719,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 148.926468,
                    "min": 148.926468,
                    "p50": 148.926468,
                    "p95": 148.926468,
                    "p99": 148.926468,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 1127.610409,
                    "min": 1127.610409,
                    "p50": 1127.610409,
                    "p95": 1127.610409,
                    "p99": 1127.610409,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 474.62426899999997,
                    "min": 474.62426899999997,
                    "p50": 474.62426899999997,
                    "p95": 474.62426899999997,
                    "p99": 474.62426899999997,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 257.79965799999997,
                    "min": 257.79965799999997,
                    "p50": 257.79965799999997,
                    "p95": 257.79965799999997,
                    "p99": 257.79965799999997,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 216.275728,
                    "min": 216.275728,
                    "p50": 216.275728,
                    "p95": 216.275728,
                    "p99": 216.275728,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 904.0533409999999,
                    "min": 904.0533409999999,
                    "p50": 904.0533409999999,
                    "p95": 904.0533409999999,
                    "p99": 904.0533409999999,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 313.40101999999996,
                    "min": 313.40101999999996,
                    "p50": 313.40101999999996,
                    "p95": 313.40101999999996,
                    "p99": 313.40101999999996,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 120.92079799999999,
                    "min": 120.92079799999999,
                    "p50": 120.92079799999999,
                    "p95": 120.92079799999999,
                    "p99": 120.92079799999999,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 224.028325,
                    "min": 224.028325,
                    "p50": 224.028325,
                    "p95": 224.028325,
                    "p99": 224.028325,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 165.46631399999998,
                    "min": 165.46631399999998,
                    "p50": 165.46631399999998,
                    "p95": 165.46631399999998,
                    "p99": 165.46631399999998,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 182.847656,
                    "min": 182.847656,
                    "p50": 182.847656,
                    "p95": 182.847656,
                    "p99": 182.847656,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 83.344701,
                    "min": 83.344701,
                    "p50": 83.344701,
                    "p95": 83.344701,
                    "p99": 83.344701,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 195.232117,
                    "min": 195.232117,
                    "p50": 195.232117,
                    "p95": 195.232117,
                    "p99": 195.232117,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 71.733008,
                    "min": 71.733008,
                    "p50": 71.733008,
                    "p95": 71.733008,
                    "p99": 71.733008,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 238.72630099999998,
                    "min": 238.72630099999998,
                    "p50": 238.72630099999998,
                    "p95": 238.72630099999998,
                    "p99": 238.72630099999998,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 154.746049,
                    "min": 154.746049,
                    "p50": 154.746049,
                    "p95": 154.746049,
                    "p99": 154.746049,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 284.531223,
                    "min": 284.531223,
                    "p50": 284.531223,
                    "p95": 284.531223,
                    "p99": 284.531223,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 205.166103,
                    "min": 205.166103,
                    "p50": 205.166103,
                    "p95": 205.166103,
                    "p99": 205.166103,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 138.551944,
                    "min": 138.551944,
                    "p50": 138.551944,
                    "p95": 138.551944,
                    "p99": 138.551944,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 75.42402799999999,
                    "min": 75.42402799999999,
                    "p50": 75.42402799999999,
                    "p95": 75.42402799999999,
                    "p99": 75.42402799999999,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 250.946576,
                    "min": 250.946576,
                    "p50": 250.946576,
                    "p95": 250.946576,
                    "p99": 250.946576,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 454.35862699999996,
                    "min": 454.35862699999996,
                    "p50": 454.35862699999996,
                    "p95": 454.35862699999996,
                    "p99": 454.35862699999996,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 164.750463,
                    "min": 164.750463,
                    "p50": 164.750463,
                    "p95": 164.750463,
                    "p99": 164.750463,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 172.404813,
                    "min": 172.404813,
                    "p50": 172.404813,
                    "p95": 172.404813,
                    "p99": 172.404813,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 105.865442,
                    "min": 105.865442,
                    "p50": 105.865442,
                    "p95": 105.865442,
                    "p99": 105.865442,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 113.64563799999999,
                    "min": 113.64563799999999,
                    "p50": 113.64563799999999,
                    "p95": 113.64563799999999,
                    "p99": 113.64563799999999,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 234.74814099999998,
                    "min": 234.74814099999998,
                    "p50": 234.74814099999998,
                    "p95": 234.74814099999998,
                    "p99": 234.74814099999998,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 43.058658,
                    "min": 43.058658,
                    "p50": 43.058658,
                    "p95": 43.058658,
                    "p99": 43.058658,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 439.127056,
                    "min": 439.127056,
                    "p50": 439.127056,
                    "p95": 439.127056,
                    "p99": 439.127056,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 156.28339599999998,
                    "min": 156.28339599999998,
                    "p50": 156.28339599999998,
                    "p95": 156.28339599999998,
                    "p99": 156.28339599999998,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 222.915866,
                    "min": 222.915866,
                    "p50": 222.915866,
                    "p95": 222.915866,
                    "p99": 222.915866,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 85.484432,
                    "min": 85.484432,
                    "p50": 85.484432,
                    "p95": 85.484432,
                    "p99": 85.484432,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 249.07692799999998,
                    "min": 249.07692799999998,
                    "p50": 249.07692799999998,
                    "p95": 249.07692799999998,
                    "p99": 249.07692799999998,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 206.204245,
                    "min": 206.204245,
                    "p50": 206.204245,
                    "p95": 206.204245,
                    "p99": 206.204245,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 138.361688,
                    "min": 138.361688,
                    "p50": 138.361688,
                    "p95": 138.361688,
                    "p99": 138.361688,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 605.508665,
                    "min": 605.508665,
                    "p50": 605.508665,
                    "p95": 605.508665,
                    "p99": 605.508665,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 94.895223,
                    "min": 94.895223,
                    "p50": 94.895223,
                    "p95": 94.895223,
                    "p99": 94.895223,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 248.381456,
                    "min": 248.381456,
                    "p50": 248.381456,
                    "p95": 248.381456,
                    "p99": 248.381456,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 313.542866,
                    "min": 313.542866,
                    "p50": 313.542866,
                    "p95": 313.542866,
                    "p99": 313.542866,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                }
            ]
        },
        "erigon": {
            "name": "erigon",
            "results": [
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                }
            ]
        },
        "besu": {
            "name": "besu",
            "results": [
                {
                    "test_case": "GasLimit",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasLimit",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Transfers",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "Transfers",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "All block gas limit consumed by simple ETH transfers"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "BlobHashZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Number",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsRandomKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyConstantValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreManyAccountsConsecutiveKeysRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyTwoValues",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyZeroValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing zero in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "SStoreOneAccountOneKeyRandomValue",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
                },
                {
                    "test_case": "Origin",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Origin",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "PointEvaluationOneData",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Point evaluation precompile repeating computations on the same data"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcRecover",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcRecover precompile calculations"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMulInfinities32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul12And32ByteScalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMul32ByteCoordinates2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMulInfinities2Scalar",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "EcMul122",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1KRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1000 rounds of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake1Round",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 1 round of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "Blake10MRounds",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Blake2f precompile with 10_000_000 rounds of computations"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "SHA2From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "SHA-2 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 32-byte source data"
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom16KBytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom8Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 8-byte source data"
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom1024Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": ""
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "1000",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 128-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "RipemdFrom1Byte",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Ripemd-160 precompile calculations based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 8-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 32-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom128Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 128-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "IdentityFrom1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Identity precompile call based on 1-byte source data"
                },
                {
                    "test_case": "Address",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Address",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreZero",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zero value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "MStoreRandom",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing random value to memory with offset zero"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "JumpDest",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Block full of JumpDest opcode only"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "Push0Pop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack, then popping it"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "PrevRandao",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "CodeCopy",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly loading 32-bytes of code to the memory"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "BaseFee",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "GasPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "GasPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
                },
                {
                    "test_case": "Caller",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Caller",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "MSize",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "ChainId",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "CoinBase",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Timestamp",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From1Byte",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 1-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From8Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 8-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "Keccak256From32Bytes",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Keccak calculations based on 32-byte source data"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "500",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "CallerPop",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing caller address to stack, then popping it"
                },
                {
                    "test_case": "Gas",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Gas",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "90",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "100",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "50",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "80",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "140",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "30",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "300",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "110",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "130",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "60",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "175",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "120",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "70",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "400",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "40",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "150",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                },
                {
                    "test_case": "Push0",
                    "gas": "200",
                    "method": "engine_newPayloadV3",
                    "max": 0,
                    "min": 0,
                    "p50": 0,
                    "p95": 0,
                    "p99": 0,
                    "n": 1,
                    "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
                }
            ]
        }
    },
    "metadata": {
        "Warmup": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Warmup",
            "Title": "Warmup",
            "Description": "Warmup"
        },
        "Transfers": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Transfers",
            "Title": "ETH transfers",
            "Description": "All block gas limit consumed by simple ETH transfers"
        },
        "TxDataZero": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "TxDataZero",
            "Title": "Tx with big zero data",
            "Description": "Single transaction with large extra data full of zeros"
        },
        "Keccak256From1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Keccak256From1Byte",
            "Title": "Keccak256 from 1 byte",
            "Description": "Keccak calculations based on 1-byte source data"
        },
        "Keccak256From8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Keccak256From8Bytes",
            "Title": "Keccak256 from 8 bytes",
            "Description": "Keccak calculations based on 8-byte source data"
        },
        "Keccak256From32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Keccak256From32Bytes",
            "Title": "Keccak256 from 32 bytes",
            "Description": "Keccak calculations based on 32-byte source data"
        },
        "Push0": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Push0",
            "Title": "Push0",
            "Description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        },
        "Push0Pop": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Push0Pop",
            "Title": "Push0-Pop",
            "Description": "Endlessly pushing zeros to stack, then popping it"
        },
        "Gas": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Gas",
            "Title": "Gas",
            "Description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        "GasPop": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "GasPop",
            "Title": "Gas-Pop",
            "Description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        "SelfBalance": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SelfBalance",
            "Title": "SelfBalance",
            "Description": "Endlessly pushing self balance to stack (1000 per 1 contract)"
        },
        "JumpDest": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "JumpDest",
            "Title": "JumpDest",
            "Description": "Block full of JumpDest opcode only"
        },
        "MSize": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "MSize",
            "Title": "MSize",
            "Description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        "MStoreZero": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "MStoreZero",
            "Title": "MStore - zero",
            "Description": "Endlessly pushing zero value to memory with offset zero"
        },
        "MStoreRandom": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "MStoreRandom",
            "Title": "MStore - random",
            "Description": "Endlessly pushing random value to memory with offset zero"
        },
        "Caller": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Caller",
            "Title": "Caller",
            "Description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        "CallerPop": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "CallerPop",
            "Title": "Caller-Pop",
            "Description": "Endlessly pushing caller address to stack, then popping it"
        },
        "Address": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Address",
            "Title": "Address",
            "Description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        "Origin": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Origin",
            "Title": "Origin",
            "Description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        "CoinBase": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "CoinBase",
            "Title": "CoinBase",
            "Description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        "Timestamp": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Timestamp",
            "Title": "Timestamp",
            "Description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        "Number": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Number",
            "Title": "Number",
            "Description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        "PrevRandao": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "PrevRandao",
            "Title": "PrevRandao",
            "Description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        "GasLimit": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "GasLimit",
            "Title": "GasLimit",
            "Description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        "ChainId": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ChainId",
            "Title": "ChainId",
            "Description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        "BaseFee": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "BaseFee",
            "Title": "BaseFee",
            "Description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        "BlobBaseFee": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "BlobBaseFee",
            "Title": "BlobBaseFee",
            "Description": "Endlessly pushing current blob base fee to stack (1000 per 1 contract)"
        },
        "BlobHashZero": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "BlobHashZero",
            "Title": "BlobHash",
            "Description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        "CodeCopy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "CodeCopy",
            "Title": "CodeCopy",
            "Description": "Endlessly loading 32-bytes of code to the memory"
        },
        "EcRecover": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcRecover",
            "Title": "EcRecover precompile",
            "Description": "EcRecover precompile calculations"
        },
        "SHA2From1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From1Byte",
            "Title": "SHA-2 precompile from 1 byte",
            "Description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        "SHA2From8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From8Bytes",
            "Title": "SHA-2 precompile from 8 bytes",
            "Description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        "SHA2From32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From32Bytes",
            "Title": "SHA-2 precompile from 32 bytes",
            "Description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        "SHA2From128Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SHA2From128Bytes",
            "Title": "SHA-2 precompile from 128 bytes",
            "Description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        "RipemdFrom1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom1Byte",
            "Title": "Ripemd-160 precompile from 1 byte",
            "Description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        "RipemdFrom8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom8Bytes",
            "Title": "Ripemd-160 precompile from 8 bytes",
            "Description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        "RipemdFrom32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom32Bytes",
            "Title": "Ripemd-160 precompile from 32 bytes",
            "Description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        "RipemdFrom128Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "RipemdFrom128Bytes",
            "Title": "Ripemd-160 precompile from 128 bytes",
            "Description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        "IdentityFrom1Byte": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom1Byte",
            "Title": "Identity precompile from 1 byte",
            "Description": "Identity precompile call based on 1-byte source data"
        },
        "IdentityFrom8Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom8Bytes",
            "Title": "Identity precompile from 8 bytes",
            "Description": "Identity precompile call based on 8-byte source data"
        },
        "IdentityFrom32Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom32Bytes",
            "Title": "Identity precompile from 32 bytes",
            "Description": "Identity precompile call based on 32-byte source data"
        },
        "IdentityFrom128Bytes": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "IdentityFrom128Bytes",
            "Title": "Identity precompile from 128 bytes",
            "Description": "Identity precompile call based on 128-byte source data"
        },
        "ModexpMinGasBaseHeavy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpMinGasBaseHeavy",
            "Title": "Modexp min gas, base heavy",
            "Description": "Modexp precompile consuming 200 gas (minimum value), with base and modulo byte size equal 192 and exponent equal 3 (0b11 - 2x 1s in binary)"
        },
        "ModexpMinGasExpHeavy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpMinGasExpHeavy",
            "Title": "Modexp min gas, exp heavy",
            "Description": "Modexp precompile consuming 200 gas (minimum value), with base and modulo byte size equal 8 and exponent equal (603x 1s in binary)"
        },
        "ModexpMinGasBalanced": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpMinGasBalanced",
            "Title": "Modexp min gas, balanced",
            "Description": "Modexp precompile consuming 200 gas (minimum value), with base and modulo byte size equal 40 and exponent equal 2^25 - 1 (25x 1s in binary)"
        },
        "Modexp215GasExpHeavy": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Modexp215GasExpHeavy",
            "Title": "Modexp 215 gas, exp heavy",
            "Description": "Modexp precompile consuming 215 gas, with base and modulo byte size equal 8 and exponent equal 2^648 - 1 (648x 1s in binary, which is max possible exponent value)"
        },
        "ModexpVulnerabilityExample1": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityExample1",
            "Title": "Modexp \"eip_example1\"",
            "Description": "Modexp precompile test case \"eip_example1\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityExample2": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityExample2",
            "Title": "Modexp \"eip_example2\"",
            "Description": "Modexp precompile test case \"eip_example2\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani1Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani1Square",
            "Title": "Modexp \"nagydani-1-square\"",
            "Description": "Modexp precompile test case \"nagydani-1-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani1Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani1Qube",
            "Title": "Modexp \"nagydani-1-qube\"",
            "Description": "Modexp precompile test case \"nagydani-1-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani1Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani1Pow0x10001",
            "Title": "Modexp \"nagydani-1-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-1-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani2Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani2Square",
            "Title": "Modexp \"nagydani-2-square\"",
            "Description": "Modexp precompile test case \"nagydani-2-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani2Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani2Qube",
            "Title": "Modexp \"nagydani-2-qube\"",
            "Description": "Modexp precompile test case \"nagydani-2-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani2Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani2Pow0x10001",
            "Title": "Modexp \"nagydani-2-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-2-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani3Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani3Square",
            "Title": "Modexp \"nagydani-3-square\"",
            "Description": "Modexp precompile test case \"nagydani-3-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani3Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani3Qube",
            "Title": "Modexp \"nagydani-3-qube\"",
            "Description": "Modexp precompile test case \"nagydani-3-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani3Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani3Pow0x10001",
            "Title": "Modexp \"nagydani-3-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-3-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani4Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani4Square",
            "Title": "Modexp \"nagydani-4-square\"",
            "Description": "Modexp precompile test case \"nagydani-4-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani4Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani4Qube",
            "Title": "Modexp \"nagydani-4-qube\"",
            "Description": "Modexp precompile test case \"nagydani-4-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani4Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani4Pow0x10001",
            "Title": "Modexp \"nagydani-4-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-4-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani5Square": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani5Square",
            "Title": "Modexp \"nagydani-5-square\"",
            "Description": "Modexp precompile test case \"nagydani-5-square\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani5Qube": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani5Qube",
            "Title": "Modexp \"nagydani-5-qube\"",
            "Description": "Modexp precompile test case \"nagydani-5-qube\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityNagydani5Pow0x10001": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityNagydani5Pow0x10001",
            "Title": "Modexp \"nagydani-5-pow0x10001\"",
            "Description": "Modexp precompile test case \"nagydani-5-pow0x10001\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityMarius1Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityMarius1Even",
            "Title": "Modexp \"marius-1-even\"",
            "Description": "Modexp precompile test case \"marius-1-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido1Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido1Even",
            "Title": "Modexp \"guido-1-even\"",
            "Description": "Modexp precompile test case \"guido-1-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido2Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido2Even",
            "Title": "Modexp \"guido-2-even\"",
            "Description": "Modexp precompile test case \"guido-2-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido3Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido3Even",
            "Title": "Modexp \"guido-3-even\"",
            "Description": "Modexp precompile test case \"guido-3-even\" reported as potential vulnerability"
        },
        "ModexpVulnerabilityGuido4Even": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "ModexpVulnerabilityGuido4Even",
            "Title": "Modexp \"guido-4-even\"",
            "Description": "Modexp precompile test case \"guido-4-even\" reported as potential vulnerability"
        },
        "EcAddInfinities": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcAddInfinities",
            "Title": "EcAdd with (0, 0)",
            "Description": "EcAdd precompile with both initial points with x = 0 and y = 0"
        },
        "EcAdd12": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcAdd12",
            "Title": "EcAdd with (1, 2)",
            "Description": "EcAdd precompile with both initial points with x = 1 and y = 2"
        },
        "EcAdd32ByteCoordinates": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcAdd32ByteCoordinates",
            "Title": "EcAdd with 32-byte coordinates",
            "Description": "EcAdd precompile with both initial points with x and y as 32-byte values"
        },
        "EcMulInfinities2Scalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMulInfinities2Scalar",
            "Title": "EcMul with (0, 0) and scalar 2",
            "Description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        "EcMulInfinities32ByteScalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMulInfinities32ByteScalar",
            "Title": "EcMul with (0, 0) and 32-byte scalar",
            "Description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        "EcMul122": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul122",
            "Title": "EcMul with (1, 2) and scalar 2",
            "Description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        "EcMul12And32ByteScalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul12And32ByteScalar",
            "Title": "EcMul with (1, 2) and 32-byte scalar",
            "Description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        "EcMul32ByteCoordinates2Scalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul32ByteCoordinates2Scalar",
            "Title": "EcMul with 32-byte coordinates and scalar 2",
            "Description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        "EcMul32ByteCoordinates32ByteScalar": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcMul32ByteCoordinates32ByteScalar",
            "Title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "Description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        "EcPairing0Input": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcPairing0Input",
            "Title": "EcPairing with empty input",
            "Description": "EcPairing precompile with empty input"
        },
        "EcPairing2Sets": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "EcPairing2Sets",
            "Title": "EcPairing with 2 sets of data",
            "Description": "EcPairing precompile with 2 sets of valid input data (6x 32-byte value)"
        },
        "Blake1Round": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake1Round",
            "Title": "Blake2f 1 round",
            "Description": "Blake2f precompile with 1 round of computations"
        },
        "Blake1KRounds": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake1KRounds",
            "Title": "Blake2f 1k rounds",
            "Description": "Blake2f precompile with 1000 rounds of computations"
        },
        "Blake1MRounds": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake1MRounds",
            "Title": "Blake2f 1M rounds",
            "Description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        "Blake10MRounds": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "Blake10MRounds",
            "Title": "Blake2f 10M rounds",
            "Description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        "PointEvaluationOneData": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "PointEvaluationOneData",
            "Title": "Point evaluation - one data",
            "Description": "Point evaluation precompile repeating computations on the same data"
        },
        "SStoreOneAccountOneKeyZeroValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyZeroValue",
            "Title": "SStore - one storage key, repeating zero value",
            "Description": "SStore - repeating storing zero in single storage key of single account"
        },
        "SStoreOneAccountOneKeyConstantValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyConstantValue",
            "Title": "SStore - one storage key, repeating constant value",
            "Description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        "SStoreOneAccountOneKeyRandomValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyRandomValue",
            "Title": "SStore - one storage key, repeating random values",
            "Description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        "SStoreOneAccountOneKeyTwoValues": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreOneAccountOneKeyTwoValues",
            "Title": "SStore - one storage key, repeating two values, zero and non-zero",
            "Description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        "SStoreManyAccountsConsecutiveKeysRandomValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsConsecutiveKeysRandomValue",
            "Title": "SStore - many accounts, consecutive storage keys, random values",
            "Description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        "SStoreManyAccountsRandomKeysRandomValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsRandomKeysRandomValue",
            "Title": "SStore - many accounts, random storage keys, random values",
            "Description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        "SStoreManyAccountsConsecutiveKeysZeroValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsConsecutiveKeysZeroValue",
            "Title": "SStore - many accounts, consecutive storage keys, zero values",
            "Description": "SStore - storing zeros in consecutive storage keys of many accounts"
        },
        "SStoreManyAccountsRandomKeysZeroValue": {
            "GasUsed": [
                30000000,
                40000000,
                50000000,
                60000000,
                70000000,
                80000000,
                90000000,
                100000000,
                110000000,
                120000000,
                130000000,
                140000000,
                150000000,
                175000000,
                200000000,
                300000000,
                400000000,
                500000000,
                1000000000
            ],
            "Name": "SStoreManyAccountsRandomKeysZeroValue",
            "Title": "SStore - many accounts, random storage keys, zero values",
            "Description": "SStore - storing zeros in random storage keys of many accounts"
        }
    },
    "test_cases": [
        "GasLimit",
        "Transfers",
        "BlobHashZero",
        "Number",
        "SStoreManyAccountsRandomKeysRandomValue",
        "SStoreOneAccountOneKeyConstantValue",
        "SStoreManyAccountsConsecutiveKeysRandomValue",
        "SStoreOneAccountOneKeyTwoValues",
        "SStoreOneAccountOneKeyZeroValue",
        "SStoreOneAccountOneKeyRandomValue",
        "Origin",
        "PointEvaluationOneData",
        "EcRecover",
        "EcMulInfinities32ByteScalar",
        "EcMul32ByteCoordinates32ByteScalar",
        "EcMul12And32ByteScalar",
        "EcMul32ByteCoordinates2Scalar",
        "EcMulInfinities2Scalar",
        "EcMul122",
        "Blake1MRounds",
        "Blake1KRounds",
        "Blake1Round",
        "Blake10MRounds",
        "SHA2From1Byte",
        "SHA2From128Bytes",
        "SHA2From32Bytes",
        "SHA2From8Bytes",
        "RipemdFrom32Bytes",
        "RipemdFrom16KBytes",
        "RipemdFrom8Bytes",
        "RipemdFrom1024Bytes",
        "RipemdFrom128Bytes",
        "RipemdFrom1Byte",
        "IdentityFrom8Bytes",
        "IdentityFrom32Bytes",
        "IdentityFrom128Bytes",
        "IdentityFrom1Byte",
        "Address",
        "MStoreZero",
        "MStoreRandom",
        "JumpDest",
        "Push0Pop",
        "PrevRandao",
        "CodeCopy",
        "BaseFee",
        "GasPop",
        "Caller",
        "MSize",
        "ChainId",
        "CoinBase",
        "Timestamp",
        "Keccak256From1Byte",
        "Keccak256From8Bytes",
        "Keccak256From32Bytes",
        "CallerPop",
        "Gas",
        "Push0"
    ]
}