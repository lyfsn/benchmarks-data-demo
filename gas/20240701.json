{
    "nethermind": [
        {
            "title": "GasLimit",
            "max": "349.24",
            "p50": "301.81",
            "p95": "156.77",
            "p99": "102.21",
            "min": "99.77",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "941.65",
            "p50": "744.19",
            "p95": "568.03",
            "p99": "529.18",
            "min": "528.00",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "453.33",
            "p50": "388.11",
            "p95": "301.06",
            "p99": "279.63",
            "min": "279.10",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "262.07",
            "p50": "237.97",
            "p95": "201.79",
            "p99": "186.51",
            "min": "185.91",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "11437.52",
            "p50": "4369.67",
            "p95": "1122.01",
            "p99": "1082.49",
            "min": "1071.87",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "986.74",
            "p50": "744.14",
            "p95": "482.82",
            "p99": "346.13",
            "min": "288.81",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "14232.30",
            "p50": "4420.95",
            "p95": "1116.58",
            "p99": "1040.55",
            "min": "1000.31",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "20151.93",
            "p50": "4479.05",
            "p95": "1196.58",
            "p99": "1096.04",
            "min": "1089.18",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "1086.64",
            "p50": "806.20",
            "p95": "523.78",
            "p99": "490.42",
            "min": "485.66",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "441.44",
            "p50": "369.65",
            "p95": "277.16",
            "p99": "257.22",
            "min": "252.37",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "237.99",
            "p50": "222.47",
            "p95": "192.54",
            "p99": "179.05",
            "min": "176.61",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "71.33",
            "p50": "69.71",
            "p95": "65.60",
            "p99": "63.92",
            "min": "63.91",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "81.03",
            "p50": "76.77",
            "p95": "71.68",
            "p99": "69.37",
            "min": "69.28",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "2348.64",
            "p50": "1559.85",
            "p95": "1053.37",
            "p99": "952.08",
            "min": "948.79",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "70.72",
            "p50": "68.76",
            "p95": "64.64",
            "p99": "62.59",
            "min": "62.30",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "70.51",
            "p50": "68.56",
            "p95": "65.26",
            "p99": "63.43",
            "min": "62.91",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "1448.00",
            "p50": "1253.81",
            "p95": "690.10",
            "p99": "642.65",
            "min": "642.12",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "3640.17",
            "p50": "2258.92",
            "p95": "1261.89",
            "p99": "1088.25",
            "min": "1074.04",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "1503.89",
            "p50": "1233.54",
            "p95": "699.47",
            "p99": "659.63",
            "min": "658.36",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "135.44",
            "p50": "126.41",
            "p95": "115.66",
            "p99": "123.27",
            "min": "114.10",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "137.68",
            "p50": "130.28",
            "p95": "114.63",
            "p99": "122.16",
            "min": "113.81",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "199.71",
            "p50": "170.90",
            "p95": "154.77",
            "p99": "160.48",
            "min": "151.28",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "194.32",
            "p50": "148.52",
            "p95": "140.45",
            "p99": "162.08",
            "min": "137.76",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "131.73",
            "p50": "123.91",
            "p95": "113.05",
            "p99": "109.56",
            "min": "109.51",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "155.29",
            "p50": "143.65",
            "p95": "130.57",
            "p99": "121.91",
            "min": "121.73",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "134.34",
            "p50": "124.51",
            "p95": "113.29",
            "p99": "87.03",
            "min": "86.75",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "134.75",
            "p50": "124.24",
            "p95": "113.66",
            "p99": "61.21",
            "min": "49.20",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "834.62",
            "p50": "679.37",
            "p95": "457.48",
            "p99": "409.40",
            "min": "401.83",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "786.62",
            "p50": "705.06",
            "p95": "436.85",
            "p99": "240.85",
            "min": "97.16",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "836.63",
            "p50": "709.96",
            "p95": "480.83",
            "p99": "404.43",
            "min": "391.15",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "767.18",
            "p50": "683.36",
            "p95": "404.37",
            "p99": "155.56",
            "min": "153.20",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "746.12",
            "p50": "626.82",
            "p95": "441.64",
            "p99": "404.60",
            "min": "391.07",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "866.44",
            "p50": "726.02",
            "p95": "489.40",
            "p99": "391.88",
            "min": "387.07",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "243.92",
            "p50": "217.34",
            "p95": "173.21",
            "p99": "161.86",
            "min": "161.84",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "241.69",
            "p50": "213.80",
            "p95": "180.67",
            "p99": "155.73",
            "min": "152.21",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "253.44",
            "p50": "219.04",
            "p95": "183.62",
            "p99": "151.75",
            "min": "147.18",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "238.05",
            "p50": "213.70",
            "p95": "179.18",
            "p99": "79.91",
            "min": "73.92",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "238.29",
            "p50": "222.34",
            "p95": "184.27",
            "p99": "173.46",
            "min": "172.91",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "313.04",
            "p50": "268.30",
            "p95": "222.02",
            "p99": "139.58",
            "min": "123.77",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "334.34",
            "p50": "290.73",
            "p95": "237.79",
            "p99": "215.53",
            "min": "215.13",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "413.37",
            "p50": "390.54",
            "p95": "295.10",
            "p99": "268.04",
            "min": "261.67",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "641.02",
            "p50": "558.09",
            "p95": "387.24",
            "p99": "338.81",
            "min": "336.51",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "286.16",
            "p50": "258.89",
            "p95": "216.75",
            "p99": "192.29",
            "min": "191.19",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "254.34",
            "p50": "236.94",
            "p95": "196.74",
            "p99": "186.00",
            "min": "185.61",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "269.47",
            "p50": "250.37",
            "p95": "207.95",
            "p99": "194.32",
            "min": "194.18",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "383.91",
            "p50": "355.70",
            "p95": "283.83",
            "p99": "175.17",
            "min": "146.92",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "238.64",
            "p50": "219.68",
            "p95": "188.39",
            "p99": "171.35",
            "min": "171.31",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "285.51",
            "p50": "268.37",
            "p95": "215.21",
            "p99": "168.43",
            "min": "160.17",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "278.20",
            "p50": "265.15",
            "p95": "227.65",
            "p99": "197.58",
            "min": "197.47",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "230.35",
            "p50": "212.19",
            "p95": "179.65",
            "p99": "148.28",
            "min": "142.89",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "281.74",
            "p50": "260.80",
            "p95": "217.28",
            "p99": "201.04",
            "min": "199.95",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "122.83",
            "p50": "119.23",
            "p95": "108.09",
            "p99": "104.57",
            "min": "104.32",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "123.24",
            "p50": "119.31",
            "p95": "108.77",
            "p99": "103.75",
            "min": "103.62",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "123.10",
            "p50": "118.56",
            "p95": "106.86",
            "p99": "102.10",
            "min": "102.01",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "387.33",
            "p50": "360.72",
            "p95": "273.00",
            "p99": "247.16",
            "min": "246.78",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "261.95",
            "p50": "247.01",
            "p95": "212.02",
            "p99": "202.10",
            "min": "201.91",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "426.82",
            "p50": "392.86",
            "p95": "306.53",
            "p99": "277.22",
            "min": "270.49",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "geth": [
        {
            "title": "GasLimit",
            "max": "191.41",
            "p50": "171.48",
            "p95": "141.99",
            "p99": "122.78",
            "min": "122.58",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "856.95",
            "p50": "600.48",
            "p95": "437.13",
            "p99": "413.49",
            "min": "413.25",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "243.34",
            "p50": "214.90",
            "p95": "175.84",
            "p99": "162.97",
            "min": "161.73",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "157.76",
            "p50": "147.36",
            "p95": "126.18",
            "p99": "112.82",
            "min": "112.22",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "2746.20",
            "p50": "1537.12",
            "p95": "1117.17",
            "p99": "848.01",
            "min": "666.81",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "331.61",
            "p50": "289.53",
            "p95": "211.77",
            "p99": "202.09",
            "min": "201.14",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "4431.33",
            "p50": "2500.41",
            "p95": "1127.23",
            "p99": "1101.33",
            "min": "1091.75",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "9112.10",
            "p50": "4483.08",
            "p95": "1158.62",
            "p99": "1086.89",
            "min": "1078.77",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "363.03",
            "p50": "314.71",
            "p95": "227.29",
            "p99": "209.75",
            "min": "199.96",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "165.49",
            "p50": "149.52",
            "p95": "129.47",
            "p99": "106.69",
            "min": "103.36",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "147.99",
            "p50": "136.49",
            "p95": "118.74",
            "p99": "103.73",
            "min": "103.17",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "241.58",
            "p50": "216.98",
            "p95": "172.13",
            "p99": "138.85",
            "min": "122.34",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "51.31",
            "p50": "48.74",
            "p95": "45.71",
            "p99": "44.81",
            "min": "44.61",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "208.37",
            "p50": "190.84",
            "p95": "156.36",
            "p99": "145.73",
            "min": "136.80",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "87.49",
            "p50": "83.49",
            "p95": "76.09",
            "p99": "74.17",
            "min": "74.03",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "86.92",
            "p50": "83.19",
            "p95": "74.35",
            "p99": "67.71",
            "min": "67.42",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "93.68",
            "p50": "89.90",
            "p95": "81.38",
            "p99": "77.88",
            "min": "77.49",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "215.15",
            "p50": "197.10",
            "p95": "157.54",
            "p99": "153.12",
            "min": "151.36",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "93.78",
            "p50": "88.89",
            "p95": "81.07",
            "p99": "75.20",
            "min": "71.49",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "111.89",
            "p50": "102.96",
            "p95": "94.96",
            "p99": "100.90",
            "min": "92.61",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "113.97",
            "p50": "107.47",
            "p95": "98.87",
            "p99": "100.41",
            "min": "93.11",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "306.34",
            "p50": "232.35",
            "p95": "186.33",
            "p99": "183.90",
            "min": "155.17",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "130.12",
            "p50": "119.27",
            "p95": "115.80",
            "p99": "113.41",
            "min": "100.80",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "452.14",
            "p50": "370.49",
            "p95": "263.16",
            "p99": "209.95",
            "min": "205.55",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "487.59",
            "p50": "383.39",
            "p95": "291.67",
            "p99": "239.45",
            "min": "236.41",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "494.16",
            "p50": "383.32",
            "p95": "246.61",
            "p99": "217.46",
            "min": "214.56",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "481.59",
            "p50": "374.38",
            "p95": "246.13",
            "p99": "214.50",
            "min": "214.11",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "1052.37",
            "p50": "730.77",
            "p95": "518.27",
            "p99": "464.99",
            "min": "452.38",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "804.69",
            "p50": "610.38",
            "p95": "419.57",
            "p99": "383.25",
            "min": "380.65",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "961.64",
            "p50": "700.48",
            "p95": "490.10",
            "p99": "425.78",
            "min": "422.26",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "843.52",
            "p50": "624.31",
            "p95": "420.71",
            "p99": "380.25",
            "min": "353.02",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "869.77",
            "p50": "634.84",
            "p95": "434.09",
            "p99": "381.24",
            "min": "372.09",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "950.07",
            "p50": "673.05",
            "p95": "459.46",
            "p99": "427.83",
            "min": "423.91",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "416.32",
            "p50": "341.62",
            "p95": "252.05",
            "p99": "223.65",
            "min": "220.71",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "405.31",
            "p50": "338.20",
            "p95": "245.41",
            "p99": "199.41",
            "min": "191.69",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "398.82",
            "p50": "328.15",
            "p95": "249.62",
            "p99": "214.74",
            "min": "208.98",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "445.94",
            "p50": "352.59",
            "p95": "258.86",
            "p99": "222.27",
            "min": "221.59",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "68.59",
            "p50": "65.98",
            "p95": "61.26",
            "p99": "55.57",
            "min": "53.91",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "155.65",
            "p50": "146.25",
            "p95": "124.50",
            "p99": "114.30",
            "min": "113.57",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "151.90",
            "p50": "142.20",
            "p95": "123.11",
            "p99": "112.67",
            "min": "110.13",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "165.23",
            "p50": "152.82",
            "p95": "129.07",
            "p99": "116.64",
            "min": "115.57",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "228.53",
            "p50": "207.38",
            "p95": "171.00",
            "p99": "160.62",
            "min": "159.77",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "143.05",
            "p50": "135.29",
            "p95": "117.39",
            "p99": "113.89",
            "min": "113.29",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "198.63",
            "p50": "182.77",
            "p95": "150.02",
            "p99": "131.48",
            "min": "127.28",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "161.54",
            "p50": "147.48",
            "p95": "126.66",
            "p99": "115.52",
            "min": "114.51",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "227.23",
            "p50": "204.86",
            "p95": "162.07",
            "p99": "150.94",
            "min": "149.73",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "108.46",
            "p50": "102.47",
            "p95": "89.56",
            "p99": "82.33",
            "min": "81.13",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "189.00",
            "p50": "177.43",
            "p95": "146.14",
            "p99": "138.08",
            "min": "137.16",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "160.31",
            "p50": "148.87",
            "p95": "128.13",
            "p99": "115.94",
            "min": "113.20",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "145.69",
            "p50": "138.01",
            "p95": "119.05",
            "p99": "111.26",
            "min": "109.59",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "189.02",
            "p50": "175.17",
            "p95": "142.79",
            "p99": "125.64",
            "min": "124.17",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "70.66",
            "p50": "67.84",
            "p95": "63.16",
            "p99": "58.66",
            "min": "57.87",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "71.99",
            "p50": "69.21",
            "p95": "64.54",
            "p99": "58.04",
            "min": "56.78",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "76.12",
            "p50": "73.06",
            "p95": "67.35",
            "p99": "60.92",
            "min": "60.50",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "170.32",
            "p50": "157.93",
            "p95": "132.40",
            "p99": "111.49",
            "min": "107.44",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "192.53",
            "p50": "177.57",
            "p95": "151.37",
            "p99": "121.43",
            "min": "120.70",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "198.85",
            "p50": "180.45",
            "p95": "150.00",
            "p99": "140.97",
            "min": "138.46",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "reth": [
        {
            "title": "GasLimit",
            "max": "721.14",
            "p50": "582.30",
            "p95": "375.31",
            "p99": "360.36",
            "min": "357.94",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "1577.16",
            "p50": "1038.18",
            "p95": "942.59",
            "p99": "908.45",
            "min": "899.75",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "868.41",
            "p50": "681.64",
            "p95": "438.91",
            "p99": "417.88",
            "min": "409.75",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "719.51",
            "p50": "566.89",
            "p95": "374.17",
            "p99": "370.10",
            "min": "370.09",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "8183.51",
            "p50": "4941.20",
            "p95": "1179.74",
            "p99": "1156.94",
            "min": "1151.05",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "808.07",
            "p50": "655.53",
            "p95": "408.30",
            "p99": "402.79",
            "min": "399.21",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "12857.90",
            "p50": "4895.14",
            "p95": "1232.17",
            "p99": "1206.03",
            "min": "1192.02",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "41024.36",
            "p50": "4861.28",
            "p95": "1254.57",
            "p99": "1164.60",
            "min": "1125.94",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "823.85",
            "p50": "649.27",
            "p95": "456.83",
            "p99": "398.34",
            "min": "396.62",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "432.80",
            "p50": "364.46",
            "p95": "294.19",
            "p99": "264.28",
            "min": "264.25",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "239.27",
            "p50": "220.53",
            "p95": "186.87",
            "p99": "178.45",
            "min": "177.95",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "72.43",
            "p50": "70.32",
            "p95": "65.32",
            "p99": "64.54",
            "min": "64.42",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "80.98",
            "p50": "76.79",
            "p95": "72.00",
            "p99": "70.25",
            "min": "70.19",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "169.31",
            "p50": "159.96",
            "p95": "142.81",
            "p99": "136.18",
            "min": "136.11",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "52.51",
            "p50": "51.47",
            "p95": "49.12",
            "p99": "48.58",
            "min": "48.51",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "52.48",
            "p50": "51.43",
            "p95": "49.35",
            "p99": "48.81",
            "min": "48.76",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "1199.76",
            "p50": "885.88",
            "p95": "594.47",
            "p99": "556.50",
            "min": "556.34",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "5862.12",
            "p50": "2900.42",
            "p95": "1244.10",
            "p99": "1171.43",
            "min": "1144.93",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "1049.83",
            "p50": "786.91",
            "p95": "516.24",
            "p99": "487.89",
            "min": "478.76",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "64.95",
            "p50": "62.02",
            "p95": "60.45",
            "p99": "62.15",
            "min": "60.05",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "70.05",
            "p50": "66.69",
            "p95": "63.15",
            "p99": "65.23",
            "min": "62.63",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "311.80",
            "p50": "268.35",
            "p95": "222.37",
            "p99": "235.76",
            "min": "217.93",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "87.33",
            "p50": "72.68",
            "p95": "69.19",
            "p99": "76.69",
            "min": "68.66",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "466.17",
            "p50": "394.46",
            "p95": "292.72",
            "p99": "277.57",
            "min": "275.12",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "485.29",
            "p50": "413.84",
            "p95": "312.50",
            "p99": "283.54",
            "min": "281.61",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "464.06",
            "p50": "394.32",
            "p95": "292.46",
            "p99": "283.77",
            "min": "283.73",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "464.11",
            "p50": "396.00",
            "p95": "304.45",
            "p99": "288.41",
            "min": "288.29",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "1545.75",
            "p50": "1059.32",
            "p95": "734.61",
            "p99": "671.51",
            "min": "651.15",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "1345.50",
            "p50": "955.45",
            "p95": "653.48",
            "p99": "616.34",
            "min": "613.24",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "1523.82",
            "p50": "1061.48",
            "p95": "735.76",
            "p99": "698.07",
            "min": "694.58",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "1340.37",
            "p50": "960.82",
            "p95": "642.64",
            "p99": "565.00",
            "min": "563.30",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "1325.33",
            "p50": "958.89",
            "p95": "629.85",
            "p99": "611.57",
            "min": "610.99",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "1523.94",
            "p50": "1028.21",
            "p95": "701.50",
            "p99": "638.70",
            "min": "636.16",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "398.60",
            "p50": "347.71",
            "p95": "275.99",
            "p99": "256.56",
            "min": "256.37",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "401.76",
            "p50": "351.93",
            "p95": "271.66",
            "p99": "259.06",
            "min": "258.86",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "426.19",
            "p50": "368.50",
            "p95": "275.29",
            "p99": "268.87",
            "min": "268.04",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "399.15",
            "p50": "349.28",
            "p95": "264.64",
            "p99": "260.51",
            "min": "260.46",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "272.18",
            "p50": "247.46",
            "p95": "200.41",
            "p99": "197.19",
            "min": "196.78",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "744.81",
            "p50": "580.41",
            "p95": "401.07",
            "p99": "321.69",
            "min": "314.46",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "792.84",
            "p50": "618.82",
            "p95": "433.66",
            "p99": "357.14",
            "min": "347.64",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "524.82",
            "p50": "455.83",
            "p95": "342.29",
            "p99": "304.50",
            "min": "302.71",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "913.18",
            "p50": "712.40",
            "p95": "472.40",
            "p99": "406.86",
            "min": "394.04",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "505.94",
            "p50": "426.72",
            "p95": "335.65",
            "p99": "303.04",
            "min": "302.75",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "588.73",
            "p50": "478.36",
            "p95": "335.48",
            "p99": "296.55",
            "min": "285.59",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "727.71",
            "p50": "568.96",
            "p95": "380.79",
            "p99": "361.01",
            "min": "359.76",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "928.86",
            "p50": "715.65",
            "p95": "473.91",
            "p99": "466.33",
            "min": "464.17",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "270.50",
            "p50": "247.84",
            "p95": "205.17",
            "p99": "193.48",
            "min": "192.31",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "682.72",
            "p50": "545.34",
            "p95": "364.18",
            "p99": "347.82",
            "min": "345.51",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "719.01",
            "p50": "577.87",
            "p95": "400.41",
            "p99": "361.28",
            "min": "358.84",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "241.88",
            "p50": "219.44",
            "p95": "182.19",
            "p99": "177.65",
            "min": "177.54",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "717.83",
            "p50": "567.99",
            "p95": "376.88",
            "p99": "359.01",
            "min": "355.44",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "147.39",
            "p50": "140.20",
            "p95": "125.88",
            "p99": "120.56",
            "min": "120.17",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "153.15",
            "p50": "144.00",
            "p95": "131.30",
            "p99": "125.03",
            "min": "124.86",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "152.10",
            "p50": "143.04",
            "p95": "126.65",
            "p99": "124.04",
            "min": "123.85",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "458.49",
            "p50": "402.29",
            "p95": "300.12",
            "p99": "277.65",
            "min": "277.39",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "718.96",
            "p50": "584.23",
            "p95": "411.70",
            "p99": "357.89",
            "min": "353.89",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "713.12",
            "p50": "580.92",
            "p95": "372.04",
            "p99": "354.70",
            "min": "348.60",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "besu": [
        {
            "title": "GasLimit",
            "max": "84.13",
            "p50": "80.65",
            "p95": "63.22",
            "p99": "58.76",
            "min": "58.27",
            "n": "120",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "599.50",
            "p50": "415.21",
            "p95": "208.46",
            "p99": "192.95",
            "min": "191.69",
            "n": "128",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "140.05",
            "p50": "131.81",
            "p95": "117.83",
            "p99": "114.91",
            "min": "114.78",
            "n": "128",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "88.38",
            "p50": "70.18",
            "p95": "66.34",
            "p99": "64.70",
            "min": "64.67",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "3104.36",
            "p50": "1990.91",
            "p95": "1105.82",
            "p99": "664.21",
            "min": "650.91",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "289.57",
            "p50": "243.94",
            "p95": "182.29",
            "p99": "156.12",
            "min": "149.80",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "5985.78",
            "p50": "1382.52",
            "p95": "680.44",
            "p99": "671.38",
            "min": "668.46",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "16723.82",
            "p50": "4490.35",
            "p95": "1235.12",
            "p99": "967.89",
            "min": "815.80",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "297.41",
            "p50": "240.90",
            "p95": "193.44",
            "p99": "185.06",
            "min": "184.50",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "238.73",
            "p50": "194.56",
            "p95": "152.69",
            "p99": "132.79",
            "min": "130.75",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "98.47",
            "p50": "92.08",
            "p95": "73.71",
            "p99": "58.34",
            "min": "58.13",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "70.99",
            "p50": "69.02",
            "p95": "65.15",
            "p99": "64.02",
            "min": "63.85",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "55.42",
            "p50": "52.64",
            "p95": "49.79",
            "p99": "48.68",
            "min": "48.62",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "1106.39",
            "p50": "824.66",
            "p95": "485.55",
            "p99": "273.74",
            "min": "216.77",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "66.95",
            "p50": "64.86",
            "p95": "59.87",
            "p99": "56.71",
            "min": "56.01",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "67.23",
            "p50": "64.63",
            "p95": "57.86",
            "p99": "55.71",
            "min": "55.26",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "867.37",
            "p50": "666.06",
            "p95": "433.41",
            "p99": "329.71",
            "min": "306.14",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "1403.39",
            "p50": "917.26",
            "p95": "526.84",
            "p99": "371.41",
            "min": "299.49",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "886.25",
            "p50": "661.45",
            "p95": "442.10",
            "p99": "291.44",
            "min": "267.35",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "76.76",
            "p50": "74.07",
            "p95": "71.29",
            "p99": "69.96",
            "min": "64.82",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "69.64",
            "p50": "66.61",
            "p95": "63.42",
            "p99": "64.72",
            "min": "62.07",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "40.56",
            "p50": "38.90",
            "p95": "35.82",
            "p99": "35.76",
            "min": "34.63",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "106.06",
            "p50": "86.91",
            "p95": "82.17",
            "p99": "91.99",
            "min": "81.37",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "68.50",
            "p50": "64.87",
            "p95": "59.30",
            "p99": "57.39",
            "min": "57.20",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "64.89",
            "p50": "62.45",
            "p95": "57.85",
            "p99": "56.45",
            "min": "56.16",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "68.06",
            "p50": "64.38",
            "p95": "59.09",
            "p99": "56.66",
            "min": "56.38",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "68.80",
            "p50": "64.89",
            "p95": "59.46",
            "p99": "57.28",
            "min": "57.23",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "249.83",
            "p50": "225.24",
            "p95": "195.10",
            "p99": "184.19",
            "min": "184.10",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "303.38",
            "p50": "273.01",
            "p95": "230.18",
            "p99": "211.29",
            "min": "211.02",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "253.40",
            "p50": "227.71",
            "p95": "191.35",
            "p99": "183.53",
            "min": "182.05",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "281.16",
            "p50": "256.88",
            "p95": "212.73",
            "p99": "200.71",
            "min": "197.05",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "240.58",
            "p50": "220.30",
            "p95": "188.47",
            "p99": "176.06",
            "min": "173.25",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "251.79",
            "p50": "229.59",
            "p95": "190.84",
            "p99": "179.37",
            "min": "175.52",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "58.13",
            "p50": "55.31",
            "p95": "50.44",
            "p99": "48.33",
            "min": "48.20",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "57.63",
            "p50": "55.22",
            "p95": "50.03",
            "p99": "47.45",
            "min": "47.23",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "61.31",
            "p50": "57.99",
            "p95": "53.15",
            "p99": "51.41",
            "min": "51.34",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "58.46",
            "p50": "55.31",
            "p95": "50.05",
            "p99": "48.74",
            "min": "48.57",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "100.45",
            "p50": "96.04",
            "p95": "90.03",
            "p99": "89.09",
            "min": "89.06",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "81.07",
            "p50": "73.62",
            "p95": "65.90",
            "p99": "63.57",
            "min": "63.29",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "86.30",
            "p50": "78.86",
            "p95": "67.34",
            "p99": "64.74",
            "min": "64.24",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "179.08",
            "p50": "165.15",
            "p95": "148.61",
            "p99": "136.67",
            "min": "134.60",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "168.87",
            "p50": "158.61",
            "p95": "138.41",
            "p99": "135.28",
            "min": "134.64",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "98.29",
            "p50": "94.12",
            "p95": "87.95",
            "p99": "85.14",
            "min": "84.71",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "89.51",
            "p50": "81.19",
            "p95": "76.08",
            "p99": "73.52",
            "min": "73.33",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "88.98",
            "p50": "85.48",
            "p95": "79.71",
            "p99": "77.39",
            "min": "77.18",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "129.28",
            "p50": "122.32",
            "p95": "111.42",
            "p99": "106.51",
            "min": "105.66",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "100.82",
            "p50": "95.32",
            "p95": "89.59",
            "p99": "86.68",
            "min": "86.67",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "74.92",
            "p50": "72.55",
            "p95": "68.77",
            "p99": "66.86",
            "min": "66.62",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "100.06",
            "p50": "94.76",
            "p95": "88.92",
            "p99": "87.19",
            "min": "87.09",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "99.45",
            "p50": "95.32",
            "p95": "88.84",
            "p99": "83.23",
            "min": "82.43",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "81.99",
            "p50": "78.25",
            "p95": "74.17",
            "p99": "73.37",
            "min": "73.34",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "62.68",
            "p50": "59.69",
            "p95": "56.55",
            "p99": "55.97",
            "min": "55.97",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "62.09",
            "p50": "59.22",
            "p95": "56.21",
            "p99": "54.70",
            "min": "54.56",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "61.49",
            "p50": "58.83",
            "p95": "56.39",
            "p99": "54.34",
            "min": "54.27",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "168.87",
            "p50": "159.70",
            "p95": "141.83",
            "p99": "131.38",
            "min": "126.93",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "75.24",
            "p50": "72.46",
            "p95": "68.23",
            "p99": "67.16",
            "min": "66.96",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "103.03",
            "p50": "98.92",
            "p95": "91.88",
            "p99": "90.07",
            "min": "89.91",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ],
    "erigon": [
        {
            "title": "GasLimit",
            "max": "158.67",
            "p50": "153.28",
            "p95": "142.12",
            "p99": "137.24",
            "min": "136.98",
            "n": "112",
            "description": "Endlessly pushing current block's gas limit to stack (1000 per 1 contract)"
        },
        {
            "title": "ETH transfers",
            "max": "208.52",
            "p50": "178.92",
            "p95": "149.57",
            "p99": "159.86",
            "min": "141.86",
            "n": "72",
            "description": "All block gas limit consumed by simple ETH transfers"
        },
        {
            "title": "BlobHash",
            "max": "201.75",
            "p50": "194.44",
            "p95": "168.75",
            "p99": "138.91",
            "min": "138.30",
            "n": "102",
            "description": "Endlessly pushing zero as index and BlobHash opcode to stack when there were no blobs (1000 per 1 contract)"
        },
        {
            "title": "Number",
            "max": "160.00",
            "p50": "152.87",
            "p95": "140.68",
            "p99": "132.37",
            "min": "131.33",
            "n": "120",
            "description": "Endlessly pushing current block's number to stack (1000 per 1 contract)"
        },
        {
            "title": "SStore - many accounts, random storage keys, random values",
            "max": "2365.70",
            "p50": "1455.63",
            "p95": "753.79",
            "p99": "591.75",
            "min": "576.70",
            "n": "152",
            "description": "SStore - storing random 32-byte values in random storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating constant value",
            "max": "343.65",
            "p50": "315.89",
            "p95": "268.57",
            "p99": "222.11",
            "min": "195.57",
            "n": "152",
            "description": "SStore - repeating storing the same 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - many accounts, consecutive storage keys, random values",
            "max": "3965.73",
            "p50": "2125.38",
            "p95": "838.02",
            "p99": "710.72",
            "min": "693.81",
            "n": "152",
            "description": "SStore - storing random 32-byte values in consecutive storage keys of many accounts"
        },
        {
            "title": "SStore - one storage key, repeating two values, zero and non-zero",
            "max": "11526.78",
            "p50": "3954.16",
            "p95": "1203.69",
            "p99": "1008.83",
            "min": "945.22",
            "n": "152",
            "description": "SStore - repeating storing zero and then storing 32-byte word in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating zero value",
            "max": "339.05",
            "p50": "311.93",
            "p95": "267.63",
            "p99": "225.90",
            "min": "219.54",
            "n": "152",
            "description": "SStore - repeating storing zero in single storage key of single account"
        },
        {
            "title": "SStore - one storage key, repeating random values",
            "max": "163.84",
            "p50": "156.09",
            "p95": "143.94",
            "p99": "131.46",
            "min": "128.22",
            "n": "144",
            "description": "SStore - repeating storing random 32-byte values in single storage key of single account"
        },
        {
            "title": "Origin",
            "max": "118.91",
            "p50": "115.65",
            "p95": "108.49",
            "p99": "99.80",
            "min": "98.46",
            "n": "120",
            "description": "Endlessly pushing execution origination address to stack (1000 per 1 contract)"
        },
        {
            "title": "Point evaluation - one data",
            "max": "238.86",
            "p50": "226.20",
            "p95": "189.67",
            "p99": "163.84",
            "min": "162.82",
            "n": "136",
            "description": "Point evaluation precompile repeating computations on the same data"
        },
        {
            "title": "EcRecover precompile",
            "max": "51.67",
            "p50": "49.74",
            "p95": "48.06",
            "p99": "45.58",
            "min": "45.56",
            "n": "136",
            "description": "EcRecover precompile calculations"
        },
        {
            "title": "EcMul with (0, 0) and 32-byte scalar",
            "max": "206.02",
            "p50": "195.93",
            "p95": "171.86",
            "p99": "152.47",
            "min": "151.56",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and 32-byte scalar",
            "max": "86.80",
            "p50": "84.37",
            "p95": "79.66",
            "p99": "77.91",
            "min": "77.51",
            "n": "136",
            "description": "EcMul precompile with initial point with x, y and scalar as 32-byte values"
        },
        {
            "title": "EcMul with (1, 2) and 32-byte scalar",
            "max": "86.57",
            "p50": "84.10",
            "p95": "78.74",
            "p99": "77.57",
            "min": "77.55",
            "n": "128",
            "description": "EcMul precompile with initial point x = 1, y = 2 scalar as 32-byte values"
        },
        {
            "title": "EcMul with 32-byte coordinates and scalar 2",
            "max": "93.19",
            "p50": "90.41",
            "p95": "85.43",
            "p99": "82.07",
            "min": "81.51",
            "n": "152",
            "description": "EcMul precompile with initial point with x and y as 32-byte values and scalar equal 2"
        },
        {
            "title": "EcMul with (0, 0) and scalar 2",
            "max": "212.19",
            "p50": "200.90",
            "p95": "176.94",
            "p99": "164.56",
            "min": "163.82",
            "n": "152",
            "description": "EcMul precompile with initial point with x = 0 and y = 0 and scalar equal 2"
        },
        {
            "title": "EcMul with (1, 2) and scalar 2",
            "max": "92.69",
            "p50": "90.22",
            "p95": "85.68",
            "p99": "78.93",
            "min": "77.90",
            "n": "152",
            "description": "EcMul precompile with initial point x = 1, y = 2 and scalar equal 2"
        },
        {
            "title": "Blake2f 1M rounds",
            "max": "108.80",
            "p50": "105.69",
            "p95": "95.55",
            "p99": "98.63",
            "min": "90.96",
            "n": "56",
            "description": "Blake2f precompile with 1_000_000 rounds of computations"
        },
        {
            "title": "Blake2f 1k rounds",
            "max": "112.01",
            "p50": "108.09",
            "p95": "102.20",
            "p99": "101.22",
            "min": "95.41",
            "n": "64",
            "description": "Blake2f precompile with 1000 rounds of computations"
        },
        {
            "title": "Blake2f 1 round",
            "max": "159.46",
            "p50": "151.37",
            "p95": "138.44",
            "p99": "132.85",
            "min": "126.60",
            "n": "80",
            "description": "Blake2f precompile with 1 round of computations"
        },
        {
            "title": "Blake2f 10M rounds",
            "max": "149.39",
            "p50": "125.45",
            "p95": "118.72",
            "p99": "130.54",
            "min": "116.32",
            "n": "56",
            "description": "Blake2f precompile with 10_000_000 rounds of computations"
        },
        {
            "title": "SHA-2 precompile from 1 byte",
            "max": "243.47",
            "p50": "223.45",
            "p95": "190.38",
            "p99": "181.48",
            "min": "181.20",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 1-byte source data"
        },
        {
            "title": "SHA-2 precompile from 128 bytes",
            "max": "269.21",
            "p50": "246.93",
            "p95": "212.86",
            "p99": "186.88",
            "min": "184.88",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 128-byte source data"
        },
        {
            "title": "SHA-2 precompile from 32 bytes",
            "max": "250.16",
            "p50": "226.02",
            "p95": "191.12",
            "p99": "181.84",
            "min": "181.43",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 32-byte source data"
        },
        {
            "title": "SHA-2 precompile from 8 bytes",
            "max": "245.90",
            "p50": "223.67",
            "p95": "186.13",
            "p99": "164.32",
            "min": "162.02",
            "n": "120",
            "description": "SHA-2 precompile calculations based on 8-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 32 bytes",
            "max": "862.33",
            "p50": "725.01",
            "p95": "504.32",
            "p99": "348.53",
            "min": "331.51",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 32-byte source data"
        },
        {
            "title": "RipemdFrom16KBytes",
            "max": "820.62",
            "p50": "707.44",
            "p95": "524.07",
            "p99": "433.65",
            "min": "389.02",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 8 bytes",
            "max": "822.00",
            "p50": "693.11",
            "p95": "532.15",
            "p99": "436.99",
            "min": "385.56",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 8-byte source data"
        },
        {
            "title": "RipemdFrom1024Bytes",
            "max": "803.14",
            "p50": "684.42",
            "p95": "519.12",
            "p99": "475.85",
            "min": "451.98",
            "n": "152",
            "description": "Description not found on metadata file"
        },
        {
            "title": "Ripemd-160 precompile from 128 bytes",
            "max": "778.38",
            "p50": "666.39",
            "p95": "519.18",
            "p99": "392.88",
            "min": "331.79",
            "n": "152",
            "description": "Ripemd-160 precompile calculations based on 128-byte source data"
        },
        {
            "title": "Ripemd-160 precompile from 1 byte",
            "max": "799.30",
            "p50": "682.14",
            "p95": "517.51",
            "p99": "367.70",
            "min": "330.59",
            "n": "144",
            "description": "Ripemd-160 precompile calculations based on 1-byte source data"
        },
        {
            "title": "Identity precompile from 8 bytes",
            "max": "213.93",
            "p50": "200.87",
            "p95": "173.72",
            "p99": "155.84",
            "min": "153.49",
            "n": "120",
            "description": "Identity precompile call based on 8-byte source data"
        },
        {
            "title": "Identity precompile from 32 bytes",
            "max": "212.15",
            "p50": "200.50",
            "p95": "180.71",
            "p99": "162.37",
            "min": "162.37",
            "n": "120",
            "description": "Identity precompile call based on 32-byte source data"
        },
        {
            "title": "Identity precompile from 128 bytes",
            "max": "221.12",
            "p50": "204.69",
            "p95": "178.48",
            "p99": "163.93",
            "min": "163.89",
            "n": "120",
            "description": "Identity precompile call based on 128-byte source data"
        },
        {
            "title": "Identity precompile from 1 byte",
            "max": "219.89",
            "p50": "205.71",
            "p95": "178.74",
            "p99": "154.36",
            "min": "152.63",
            "n": "120",
            "description": "Identity precompile call based on 1-byte source data"
        },
        {
            "title": "Address",
            "max": "89.91",
            "p50": "87.20",
            "p95": "82.29",
            "p99": "77.89",
            "min": "77.74",
            "n": "128",
            "description": "Endlessly pushing account address to stack (1000 per 1 contract)"
        },
        {
            "title": "MStore - zero",
            "max": "83.28",
            "p50": "80.98",
            "p95": "76.26",
            "p99": "74.93",
            "min": "74.79",
            "n": "120",
            "description": "Endlessly pushing zero value to memory with offset zero"
        },
        {
            "title": "MStore - random",
            "max": "77.05",
            "p50": "75.02",
            "p95": "71.78",
            "p99": "66.87",
            "min": "66.72",
            "n": "128",
            "description": "Endlessly pushing random value to memory with offset zero"
        },
        {
            "title": "JumpDest",
            "max": "120.16",
            "p50": "116.40",
            "p95": "107.83",
            "p99": "97.88",
            "min": "97.25",
            "n": "144",
            "description": "Block full of JumpDest opcode only"
        },
        {
            "title": "Push0-Pop",
            "max": "179.38",
            "p50": "170.88",
            "p95": "153.78",
            "p99": "140.46",
            "min": "137.42",
            "n": "144",
            "description": "Endlessly pushing zeros to stack, then popping it"
        },
        {
            "title": "PrevRandao",
            "max": "121.12",
            "p50": "117.29",
            "p95": "105.20",
            "p99": "99.45",
            "min": "99.29",
            "n": "120",
            "description": "Endlessly pushing previous block's randao mix to stack (1000 per 1 contract)"
        },
        {
            "title": "CodeCopy",
            "max": "176.36",
            "p50": "166.25",
            "p95": "148.53",
            "p99": "131.80",
            "min": "127.09",
            "n": "128",
            "description": "Endlessly loading 32-bytes of code to the memory"
        },
        {
            "title": "BaseFee",
            "max": "159.19",
            "p50": "153.34",
            "p95": "135.95",
            "p99": "126.97",
            "min": "126.36",
            "n": "120",
            "description": "Endlessly pushing current base fee to stack (1000 per 1 contract)"
        },
        {
            "title": "Gas-Pop",
            "max": "179.27",
            "p50": "170.03",
            "p95": "153.98",
            "p99": "127.23",
            "min": "126.59",
            "n": "136",
            "description": "Endlessly pushing amount of remaining gas to stack, then popping it"
        },
        {
            "title": "Caller",
            "max": "89.16",
            "p50": "87.00",
            "p95": "82.15",
            "p99": "79.29",
            "min": "79.23",
            "n": "120",
            "description": "Endlessly pushing caller address to stack (1000 per 1 contract)"
        },
        {
            "title": "MSize",
            "max": "158.19",
            "p50": "152.31",
            "p95": "138.50",
            "p99": "130.39",
            "min": "129.74",
            "n": "120",
            "description": "Endlessly pushing memory size to stack (1000 per 1 contract)"
        },
        {
            "title": "ChainId",
            "max": "134.15",
            "p50": "129.77",
            "p95": "114.73",
            "p99": "110.84",
            "min": "110.66",
            "n": "128",
            "description": "Endlessly pushing chain ID to stack (1000 per 1 contract)"
        },
        {
            "title": "CoinBase",
            "max": "118.78",
            "p50": "115.66",
            "p95": "106.01",
            "p99": "100.09",
            "min": "99.52",
            "n": "120",
            "description": "Endlessly pushing current block's coinbase to stack (1000 per 1 contract)"
        },
        {
            "title": "Timestamp",
            "max": "158.06",
            "p50": "151.64",
            "p95": "136.57",
            "p99": "126.49",
            "min": "124.51",
            "n": "120",
            "description": "Endlessly pushing current block's timestamp to stack (1000 per 1 contract)"
        },
        {
            "title": "Keccak256 from 1 byte",
            "max": "64.44",
            "p50": "63.09",
            "p95": "60.78",
            "p99": "59.63",
            "min": "59.52",
            "n": "120",
            "description": "Keccak calculations based on 1-byte source data"
        },
        {
            "title": "Keccak256 from 8 bytes",
            "max": "65.59",
            "p50": "64.21",
            "p95": "61.15",
            "p99": "59.17",
            "min": "58.88",
            "n": "120",
            "description": "Keccak calculations based on 8-byte source data"
        },
        {
            "title": "Keccak256 from 32 bytes",
            "max": "68.95",
            "p50": "67.32",
            "p95": "64.59",
            "p99": "62.54",
            "min": "62.19",
            "n": "120",
            "description": "Keccak calculations based on 32-byte source data"
        },
        {
            "title": "Caller-Pop",
            "max": "145.74",
            "p50": "139.52",
            "p95": "128.16",
            "p99": "100.77",
            "min": "93.78",
            "n": "144",
            "description": "Endlessly pushing caller address to stack, then popping it"
        },
        {
            "title": "Gas",
            "max": "159.66",
            "p50": "152.84",
            "p95": "135.90",
            "p99": "124.41",
            "min": "122.46",
            "n": "128",
            "description": "Endlessly pushing amount of remaining gas to stack (1000 per 1 contract)"
        },
        {
            "title": "Push0",
            "max": "162.00",
            "p50": "155.67",
            "p95": "143.29",
            "p99": "128.97",
            "min": "126.16",
            "n": "136",
            "description": "Endlessly pushing zeros to stack (1000 per 1 contract)"
        }
    ]
}